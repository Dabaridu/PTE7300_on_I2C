
PTE7300_on_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004018  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080041a8  080041a8  000141a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004234  08004234  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004234  08004234  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004234  08004234  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004234  08004234  00014234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004238  08004238  00014238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800423c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000110  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000180  20000180  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bffe  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000192b  00000000  00000000  0002c09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000960  00000000  00000000  0002d9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008b8  00000000  00000000  0002e330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001abff  00000000  00000000  0002ebe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d1f5  00000000  00000000  000497e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bef0  00000000  00000000  000569dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f28cc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a0c  00000000  00000000  000f291c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004190 	.word	0x08004190

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004190 	.word	0x08004190

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08c      	sub	sp, #48	; 0x30
 8000284:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fa9f 	bl	80007c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f85f 	bl	800034c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f91f 	bl	80004d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000292:	f000 f8ad 	bl	80003f0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000296:	f000 f8eb 	bl	8000470 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	    // Tell TMP102 that we want to read from the temperature register
	    buf[0] = REG_TEMP;
 800029a:	2330      	movs	r3, #48	; 0x30
 800029c:	703b      	strb	r3, [r7, #0]
	    ret = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, 500);
 800029e:	23d8      	movs	r3, #216	; 0xd8
 80002a0:	b299      	uxth	r1, r3
 80002a2:	463a      	mov	r2, r7
 80002a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80002a8:	9300      	str	r3, [sp, #0]
 80002aa:	2301      	movs	r3, #1
 80002ac:	4822      	ldr	r0, [pc, #136]	; (8000338 <main+0xb8>)
 80002ae:	f000 fdfd 	bl	8000eac <HAL_I2C_Master_Transmit>
 80002b2:	4603      	mov	r3, r0
 80002b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    if ( ret != HAL_OK ) {
 80002b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d008      	beq.n	80002d2 <main+0x52>
	      strcpy((char*)buf, "Error Tx\r\n");
 80002c0:	463b      	mov	r3, r7
 80002c2:	4a1e      	ldr	r2, [pc, #120]	; (800033c <main+0xbc>)
 80002c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80002c6:	c303      	stmia	r3!, {r0, r1}
 80002c8:	801a      	strh	r2, [r3, #0]
 80002ca:	3302      	adds	r3, #2
 80002cc:	0c12      	lsrs	r2, r2, #16
 80002ce:	701a      	strb	r2, [r3, #0]
 80002d0:	e021      	b.n	8000316 <main+0x96>
	    } else {

	      // Read 2 bytes from the temperature register
	      ret = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, buf, 2, 500);
 80002d2:	23d8      	movs	r3, #216	; 0xd8
 80002d4:	b299      	uxth	r1, r3
 80002d6:	463a      	mov	r2, r7
 80002d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80002dc:	9300      	str	r3, [sp, #0]
 80002de:	2302      	movs	r3, #2
 80002e0:	4815      	ldr	r0, [pc, #84]	; (8000338 <main+0xb8>)
 80002e2:	f000 fed7 	bl	8001094 <HAL_I2C_Master_Receive>
 80002e6:	4603      	mov	r3, r0
 80002e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	      if ( ret != HAL_OK ) {
 80002ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d005      	beq.n	8000300 <main+0x80>
	        strcpy((char*)buf, "Error x\r\n");
 80002f4:	463b      	mov	r3, r7
 80002f6:	4a12      	ldr	r2, [pc, #72]	; (8000340 <main+0xc0>)
 80002f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80002fa:	c303      	stmia	r3!, {r0, r1}
 80002fc:	801a      	strh	r2, [r3, #0]
 80002fe:	e00a      	b.n	8000316 <main+0x96>
	      } else {

	    	  //BITS
	          pressure = ((uint16_t)buf[1] << 8) | buf[0];
 8000300:	787b      	ldrb	r3, [r7, #1]
 8000302:	021b      	lsls	r3, r3, #8
 8000304:	783a      	ldrb	r2, [r7, #0]
 8000306:	4313      	orrs	r3, r2
 8000308:	623b      	str	r3, [r7, #32]
	        // Convert to float temperature value (Celsius)
	        //temp_c = val * 0.0625;

	        // Convert number to buffer output as:
	        //sprintf((char*)buf,"%u\r\n",((unsigned int)pressure));
	        sprintf((char*)buf,"%u\r\n",((signed int)pressure));
 800030a:	463b      	mov	r3, r7
 800030c:	6a3a      	ldr	r2, [r7, #32]
 800030e:	490d      	ldr	r1, [pc, #52]	; (8000344 <main+0xc4>)
 8000310:	4618      	mov	r0, r3
 8000312:	f003 facf 	bl	80038b4 <siprintf>
	    //for(int i = 0; i < strlen((char*)buf); i++){
	    //	HAL_UART_Transmit(&huart2,val,20, 1000);
	    //}

	    // Send out buffer (pressure or error message)
	    HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), 200);
 8000316:	463b      	mov	r3, r7
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff59 	bl	80001d0 <strlen>
 800031e:	4603      	mov	r3, r0
 8000320:	b29a      	uxth	r2, r3
 8000322:	4639      	mov	r1, r7
 8000324:	23c8      	movs	r3, #200	; 0xc8
 8000326:	4808      	ldr	r0, [pc, #32]	; (8000348 <main+0xc8>)
 8000328:	f002 febc 	bl	80030a4 <HAL_UART_Transmit>
	    //HAL_UART_Transmit(&huart2,"\r\n",10, 1000);

	    // Wait
	    HAL_Delay(500);
 800032c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000330:	f000 fab0 	bl	8000894 <HAL_Delay>
	    buf[0] = REG_TEMP;
 8000334:	e7b1      	b.n	800029a <main+0x1a>
 8000336:	bf00      	nop
 8000338:	2000008c 	.word	0x2000008c
 800033c:	080041a8 	.word	0x080041a8
 8000340:	080041b4 	.word	0x080041b4
 8000344:	080041c0 	.word	0x080041c0
 8000348:	200000e0 	.word	0x200000e0

0800034c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b096      	sub	sp, #88	; 0x58
 8000350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000352:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000356:	2228      	movs	r2, #40	; 0x28
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f003 faa2 	bl	80038a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000360:	f107 031c 	add.w	r3, r7, #28
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	605a      	str	r2, [r3, #4]
 800036a:	609a      	str	r2, [r3, #8]
 800036c:	60da      	str	r2, [r3, #12]
 800036e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]
 8000378:	609a      	str	r2, [r3, #8]
 800037a:	60da      	str	r2, [r3, #12]
 800037c:	611a      	str	r2, [r3, #16]
 800037e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000380:	2302      	movs	r3, #2
 8000382:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000384:	2301      	movs	r3, #1
 8000386:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000388:	2310      	movs	r3, #16
 800038a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800038c:	2300      	movs	r3, #0
 800038e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000390:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000394:	4618      	mov	r0, r3
 8000396:	f001 fa9d 	bl	80018d4 <HAL_RCC_OscConfig>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003a0:	f000 f8c6 	bl	8000530 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a4:	230f      	movs	r3, #15
 80003a6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003a8:	2300      	movs	r3, #0
 80003aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003b8:	f107 031c 	add.w	r3, r7, #28
 80003bc:	2100      	movs	r1, #0
 80003be:	4618      	mov	r0, r3
 80003c0:	f002 fac6 	bl	8002950 <HAL_RCC_ClockConfig>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003ca:	f000 f8b1 	bl	8000530 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80003ce:	2320      	movs	r3, #32
 80003d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003d2:	2300      	movs	r3, #0
 80003d4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	4618      	mov	r0, r3
 80003da:	f002 fcef 	bl	8002dbc <HAL_RCCEx_PeriphCLKConfig>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80003e4:	f000 f8a4 	bl	8000530 <Error_Handler>
  }
}
 80003e8:	bf00      	nop
 80003ea:	3758      	adds	r7, #88	; 0x58
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003f4:	4b1b      	ldr	r3, [pc, #108]	; (8000464 <MX_I2C1_Init+0x74>)
 80003f6:	4a1c      	ldr	r2, [pc, #112]	; (8000468 <MX_I2C1_Init+0x78>)
 80003f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003fa:	4b1a      	ldr	r3, [pc, #104]	; (8000464 <MX_I2C1_Init+0x74>)
 80003fc:	4a1b      	ldr	r2, [pc, #108]	; (800046c <MX_I2C1_Init+0x7c>)
 80003fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 216;
 8000400:	4b18      	ldr	r3, [pc, #96]	; (8000464 <MX_I2C1_Init+0x74>)
 8000402:	22d8      	movs	r2, #216	; 0xd8
 8000404:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000406:	4b17      	ldr	r3, [pc, #92]	; (8000464 <MX_I2C1_Init+0x74>)
 8000408:	2201      	movs	r2, #1
 800040a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800040c:	4b15      	ldr	r3, [pc, #84]	; (8000464 <MX_I2C1_Init+0x74>)
 800040e:	2200      	movs	r2, #0
 8000410:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000412:	4b14      	ldr	r3, [pc, #80]	; (8000464 <MX_I2C1_Init+0x74>)
 8000414:	2200      	movs	r2, #0
 8000416:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000418:	4b12      	ldr	r3, [pc, #72]	; (8000464 <MX_I2C1_Init+0x74>)
 800041a:	2200      	movs	r2, #0
 800041c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800041e:	4b11      	ldr	r3, [pc, #68]	; (8000464 <MX_I2C1_Init+0x74>)
 8000420:	2200      	movs	r2, #0
 8000422:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000424:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <MX_I2C1_Init+0x74>)
 8000426:	2200      	movs	r2, #0
 8000428:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800042a:	480e      	ldr	r0, [pc, #56]	; (8000464 <MX_I2C1_Init+0x74>)
 800042c:	f000 fcae 	bl	8000d8c <HAL_I2C_Init>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000436:	f000 f87b 	bl	8000530 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800043a:	2100      	movs	r1, #0
 800043c:	4809      	ldr	r0, [pc, #36]	; (8000464 <MX_I2C1_Init+0x74>)
 800043e:	f001 f9b1 	bl	80017a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000448:	f000 f872 	bl	8000530 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800044c:	2100      	movs	r1, #0
 800044e:	4805      	ldr	r0, [pc, #20]	; (8000464 <MX_I2C1_Init+0x74>)
 8000450:	f001 f9f3 	bl	800183a <HAL_I2CEx_ConfigDigitalFilter>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800045a:	f000 f869 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	2000008c 	.word	0x2000008c
 8000468:	40005400 	.word	0x40005400
 800046c:	2000090e 	.word	0x2000090e

08000470 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000474:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 8000476:	4a15      	ldr	r2, [pc, #84]	; (80004cc <MX_USART2_UART_Init+0x5c>)
 8000478:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800047a:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 800047c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000480:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000482:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 800048a:	2200      	movs	r2, #0
 800048c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 8000490:	2200      	movs	r2, #0
 8000492:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 8000496:	220c      	movs	r2, #12
 8000498:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800049a:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 800049c:	2200      	movs	r2, #0
 800049e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a0:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004a6:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004b2:	4805      	ldr	r0, [pc, #20]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 80004b4:	f002 fda8 	bl	8003008 <HAL_UART_Init>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004be:	f000 f837 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	200000e0 	.word	0x200000e0
 80004cc:	40004400 	.word	0x40004400

080004d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004d6:	4b15      	ldr	r3, [pc, #84]	; (800052c <MX_GPIO_Init+0x5c>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	4a14      	ldr	r2, [pc, #80]	; (800052c <MX_GPIO_Init+0x5c>)
 80004dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004e0:	6153      	str	r3, [r2, #20]
 80004e2:	4b12      	ldr	r3, [pc, #72]	; (800052c <MX_GPIO_Init+0x5c>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ee:	4b0f      	ldr	r3, [pc, #60]	; (800052c <MX_GPIO_Init+0x5c>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a0e      	ldr	r2, [pc, #56]	; (800052c <MX_GPIO_Init+0x5c>)
 80004f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004f8:	6153      	str	r3, [r2, #20]
 80004fa:	4b0c      	ldr	r3, [pc, #48]	; (800052c <MX_GPIO_Init+0x5c>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <MX_GPIO_Init+0x5c>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a08      	ldr	r2, [pc, #32]	; (800052c <MX_GPIO_Init+0x5c>)
 800050c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000510:	6153      	str	r3, [r2, #20]
 8000512:	4b06      	ldr	r3, [pc, #24]	; (800052c <MX_GPIO_Init+0x5c>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000

08000530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000534:	b672      	cpsid	i
}
 8000536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000538:	e7fe      	b.n	8000538 <Error_Handler+0x8>
	...

0800053c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <HAL_MspInit+0x44>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <HAL_MspInit+0x44>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6193      	str	r3, [r2, #24]
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <HAL_MspInit+0x44>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <HAL_MspInit+0x44>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	4a08      	ldr	r2, [pc, #32]	; (8000580 <HAL_MspInit+0x44>)
 8000560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000564:	61d3      	str	r3, [r2, #28]
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <HAL_MspInit+0x44>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000

08000584 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a17      	ldr	r2, [pc, #92]	; (8000600 <HAL_I2C_MspInit+0x7c>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d127      	bne.n	80005f6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a6:	4b17      	ldr	r3, [pc, #92]	; (8000604 <HAL_I2C_MspInit+0x80>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a16      	ldr	r2, [pc, #88]	; (8000604 <HAL_I2C_MspInit+0x80>)
 80005ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	4b14      	ldr	r3, [pc, #80]	; (8000604 <HAL_I2C_MspInit+0x80>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005be:	23c0      	movs	r3, #192	; 0xc0
 80005c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005c2:	2312      	movs	r3, #18
 80005c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c6:	2301      	movs	r3, #1
 80005c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ca:	2303      	movs	r3, #3
 80005cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005ce:	2304      	movs	r3, #4
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4619      	mov	r1, r3
 80005d8:	480b      	ldr	r0, [pc, #44]	; (8000608 <HAL_I2C_MspInit+0x84>)
 80005da:	f000 fa65 	bl	8000aa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <HAL_I2C_MspInit+0x80>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	4a08      	ldr	r2, [pc, #32]	; (8000604 <HAL_I2C_MspInit+0x80>)
 80005e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005e8:	61d3      	str	r3, [r2, #28]
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <HAL_I2C_MspInit+0x80>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80005f6:	bf00      	nop
 80005f8:	3728      	adds	r7, #40	; 0x28
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40005400 	.word	0x40005400
 8000604:	40021000 	.word	0x40021000
 8000608:	48000400 	.word	0x48000400

0800060c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	; 0x28
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a17      	ldr	r2, [pc, #92]	; (8000688 <HAL_UART_MspInit+0x7c>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d128      	bne.n	8000680 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800062e:	4b17      	ldr	r3, [pc, #92]	; (800068c <HAL_UART_MspInit+0x80>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	4a16      	ldr	r2, [pc, #88]	; (800068c <HAL_UART_MspInit+0x80>)
 8000634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000638:	61d3      	str	r3, [r2, #28]
 800063a:	4b14      	ldr	r3, [pc, #80]	; (800068c <HAL_UART_MspInit+0x80>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <HAL_UART_MspInit+0x80>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	4a10      	ldr	r2, [pc, #64]	; (800068c <HAL_UART_MspInit+0x80>)
 800064c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000650:	6153      	str	r3, [r2, #20]
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <HAL_UART_MspInit+0x80>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800065e:	230c      	movs	r3, #12
 8000660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000662:	2302      	movs	r3, #2
 8000664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800066a:	2303      	movs	r3, #3
 800066c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800066e:	2307      	movs	r3, #7
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	4619      	mov	r1, r3
 8000678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067c:	f000 fa14 	bl	8000aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000680:	bf00      	nop
 8000682:	3728      	adds	r7, #40	; 0x28
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40004400 	.word	0x40004400
 800068c:	40021000 	.word	0x40021000

08000690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <NMI_Handler+0x4>

08000696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069a:	e7fe      	b.n	800069a <HardFault_Handler+0x4>

0800069c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <MemManage_Handler+0x4>

080006a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <BusFault_Handler+0x4>

080006a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <UsageFault_Handler+0x4>

080006ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006dc:	f000 f8ba 	bl	8000854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006ec:	4a14      	ldr	r2, [pc, #80]	; (8000740 <_sbrk+0x5c>)
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <_sbrk+0x60>)
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <_sbrk+0x64>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d102      	bne.n	8000706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <_sbrk+0x64>)
 8000702:	4a12      	ldr	r2, [pc, #72]	; (800074c <_sbrk+0x68>)
 8000704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <_sbrk+0x64>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4413      	add	r3, r2
 800070e:	693a      	ldr	r2, [r7, #16]
 8000710:	429a      	cmp	r2, r3
 8000712:	d207      	bcs.n	8000724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000714:	f003 f89c 	bl	8003850 <__errno>
 8000718:	4603      	mov	r3, r0
 800071a:	220c      	movs	r2, #12
 800071c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800071e:	f04f 33ff 	mov.w	r3, #4294967295
 8000722:	e009      	b.n	8000738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <_sbrk+0x64>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800072a:	4b07      	ldr	r3, [pc, #28]	; (8000748 <_sbrk+0x64>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4413      	add	r3, r2
 8000732:	4a05      	ldr	r2, [pc, #20]	; (8000748 <_sbrk+0x64>)
 8000734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000736:	68fb      	ldr	r3, [r7, #12]
}
 8000738:	4618      	mov	r0, r3
 800073a:	3718      	adds	r7, #24
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20003000 	.word	0x20003000
 8000744:	00000400 	.word	0x00000400
 8000748:	20000168 	.word	0x20000168
 800074c:	20000180 	.word	0x20000180

08000750 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <SystemInit+0x20>)
 8000756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800075a:	4a05      	ldr	r2, [pc, #20]	; (8000770 <SystemInit+0x20>)
 800075c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007ac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000778:	f7ff ffea 	bl	8000750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800077e:	490d      	ldr	r1, [pc, #52]	; (80007b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000780:	4a0d      	ldr	r2, [pc, #52]	; (80007b8 <LoopForever+0xe>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000784:	e002      	b.n	800078c <LoopCopyDataInit>

08000786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078a:	3304      	adds	r3, #4

0800078c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800078c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000790:	d3f9      	bcc.n	8000786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000792:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000794:	4c0a      	ldr	r4, [pc, #40]	; (80007c0 <LoopForever+0x16>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000798:	e001      	b.n	800079e <LoopFillZerobss>

0800079a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800079c:	3204      	adds	r2, #4

0800079e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a0:	d3fb      	bcc.n	800079a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007a2:	f003 f85b 	bl	800385c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007a6:	f7ff fd6b 	bl	8000280 <main>

080007aa <LoopForever>:

LoopForever:
    b LoopForever
 80007aa:	e7fe      	b.n	80007aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007ac:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80007b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007b8:	0800423c 	.word	0x0800423c
  ldr r2, =_sbss
 80007bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007c0:	20000180 	.word	0x20000180

080007c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007c4:	e7fe      	b.n	80007c4 <ADC1_2_IRQHandler>
	...

080007c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <HAL_Init+0x28>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <HAL_Init+0x28>)
 80007d2:	f043 0310 	orr.w	r3, r3, #16
 80007d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d8:	2003      	movs	r0, #3
 80007da:	f000 f931 	bl	8000a40 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007de:	200f      	movs	r0, #15
 80007e0:	f000 f808 	bl	80007f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e4:	f7ff feaa 	bl	800053c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40022000 	.word	0x40022000

080007f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <HAL_InitTick+0x54>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_InitTick+0x58>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4619      	mov	r1, r3
 8000806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080a:	fbb3 f3f1 	udiv	r3, r3, r1
 800080e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000812:	4618      	mov	r0, r3
 8000814:	f000 f93b 	bl	8000a8e <HAL_SYSTICK_Config>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800081e:	2301      	movs	r3, #1
 8000820:	e00e      	b.n	8000840 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2b0f      	cmp	r3, #15
 8000826:	d80a      	bhi.n	800083e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000828:	2200      	movs	r2, #0
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	f04f 30ff 	mov.w	r0, #4294967295
 8000830:	f000 f911 	bl	8000a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000834:	4a06      	ldr	r2, [pc, #24]	; (8000850 <HAL_InitTick+0x5c>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800083a:	2300      	movs	r3, #0
 800083c:	e000      	b.n	8000840 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
}
 8000840:	4618      	mov	r0, r3
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000000 	.word	0x20000000
 800084c:	20000008 	.word	0x20000008
 8000850:	20000004 	.word	0x20000004

08000854 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_IncTick+0x20>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	461a      	mov	r2, r3
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_IncTick+0x24>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4413      	add	r3, r2
 8000864:	4a04      	ldr	r2, [pc, #16]	; (8000878 <HAL_IncTick+0x24>)
 8000866:	6013      	str	r3, [r2, #0]
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	20000008 	.word	0x20000008
 8000878:	2000016c 	.word	0x2000016c

0800087c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <HAL_GetTick+0x14>)
 8000882:	681b      	ldr	r3, [r3, #0]
}
 8000884:	4618      	mov	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	2000016c 	.word	0x2000016c

08000894 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800089c:	f7ff ffee 	bl	800087c <HAL_GetTick>
 80008a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008ac:	d005      	beq.n	80008ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <HAL_Delay+0x44>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	461a      	mov	r2, r3
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	4413      	add	r3, r2
 80008b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008ba:	bf00      	nop
 80008bc:	f7ff ffde 	bl	800087c <HAL_GetTick>
 80008c0:	4602      	mov	r2, r0
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d8f7      	bhi.n	80008bc <HAL_Delay+0x28>
  {
  }
}
 80008cc:	bf00      	nop
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000008 	.word	0x20000008

080008dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <__NVIC_SetPriorityGrouping+0x44>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008f8:	4013      	ands	r3, r2
 80008fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800090c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800090e:	4a04      	ldr	r2, [pc, #16]	; (8000920 <__NVIC_SetPriorityGrouping+0x44>)
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	60d3      	str	r3, [r2, #12]
}
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000928:	4b04      	ldr	r3, [pc, #16]	; (800093c <__NVIC_GetPriorityGrouping+0x18>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	0a1b      	lsrs	r3, r3, #8
 800092e:	f003 0307 	and.w	r3, r3, #7
}
 8000932:	4618      	mov	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	6039      	str	r1, [r7, #0]
 800094a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800094c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000950:	2b00      	cmp	r3, #0
 8000952:	db0a      	blt.n	800096a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	b2da      	uxtb	r2, r3
 8000958:	490c      	ldr	r1, [pc, #48]	; (800098c <__NVIC_SetPriority+0x4c>)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	0112      	lsls	r2, r2, #4
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	440b      	add	r3, r1
 8000964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000968:	e00a      	b.n	8000980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4908      	ldr	r1, [pc, #32]	; (8000990 <__NVIC_SetPriority+0x50>)
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	f003 030f 	and.w	r3, r3, #15
 8000976:	3b04      	subs	r3, #4
 8000978:	0112      	lsls	r2, r2, #4
 800097a:	b2d2      	uxtb	r2, r2
 800097c:	440b      	add	r3, r1
 800097e:	761a      	strb	r2, [r3, #24]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000e100 	.word	0xe000e100
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000994:	b480      	push	{r7}
 8000996:	b089      	sub	sp, #36	; 0x24
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	f1c3 0307 	rsb	r3, r3, #7
 80009ae:	2b04      	cmp	r3, #4
 80009b0:	bf28      	it	cs
 80009b2:	2304      	movcs	r3, #4
 80009b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	3304      	adds	r3, #4
 80009ba:	2b06      	cmp	r3, #6
 80009bc:	d902      	bls.n	80009c4 <NVIC_EncodePriority+0x30>
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3b03      	subs	r3, #3
 80009c2:	e000      	b.n	80009c6 <NVIC_EncodePriority+0x32>
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c8:	f04f 32ff 	mov.w	r2, #4294967295
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43da      	mvns	r2, r3
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	401a      	ands	r2, r3
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009dc:	f04f 31ff 	mov.w	r1, #4294967295
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	fa01 f303 	lsl.w	r3, r1, r3
 80009e6:	43d9      	mvns	r1, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ec:	4313      	orrs	r3, r2
         );
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3724      	adds	r7, #36	; 0x24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
	...

080009fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a0c:	d301      	bcc.n	8000a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e00f      	b.n	8000a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a12:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <SysTick_Config+0x40>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a1a:	210f      	movs	r1, #15
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a20:	f7ff ff8e 	bl	8000940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <SysTick_Config+0x40>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2a:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <SysTick_Config+0x40>)
 8000a2c:	2207      	movs	r2, #7
 8000a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	e000e010 	.word	0xe000e010

08000a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff ff47 	bl	80008dc <__NVIC_SetPriorityGrouping>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b086      	sub	sp, #24
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
 8000a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a68:	f7ff ff5c 	bl	8000924 <__NVIC_GetPriorityGrouping>
 8000a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	68b9      	ldr	r1, [r7, #8]
 8000a72:	6978      	ldr	r0, [r7, #20]
 8000a74:	f7ff ff8e 	bl	8000994 <NVIC_EncodePriority>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a7e:	4611      	mov	r1, r2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff ff5d 	bl	8000940 <__NVIC_SetPriority>
}
 8000a86:	bf00      	nop
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff ffb0 	bl	80009fc <SysTick_Config>
 8000a9c:	4603      	mov	r3, r0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b087      	sub	sp, #28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab6:	e14e      	b.n	8000d56 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	2101      	movs	r1, #1
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	f000 8140 	beq.w	8000d50 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f003 0303 	and.w	r3, r3, #3
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d005      	beq.n	8000ae8 <HAL_GPIO_Init+0x40>
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f003 0303 	and.w	r3, r3, #3
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d130      	bne.n	8000b4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	2203      	movs	r2, #3
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	43db      	mvns	r3, r3
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4013      	ands	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	68da      	ldr	r2, [r3, #12]
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b1e:	2201      	movs	r2, #1
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	091b      	lsrs	r3, r3, #4
 8000b34:	f003 0201 	and.w	r2, r3, #1
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f003 0303 	and.w	r3, r3, #3
 8000b52:	2b03      	cmp	r3, #3
 8000b54:	d017      	beq.n	8000b86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	68db      	ldr	r3, [r3, #12]
 8000b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	2203      	movs	r2, #3
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43db      	mvns	r3, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	689a      	ldr	r2, [r3, #8]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f003 0303 	and.w	r3, r3, #3
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d123      	bne.n	8000bda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	08da      	lsrs	r2, r3, #3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3208      	adds	r2, #8
 8000b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	220f      	movs	r2, #15
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	691a      	ldr	r2, [r3, #16]
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	f003 0307 	and.w	r3, r3, #7
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	08da      	lsrs	r2, r3, #3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3208      	adds	r2, #8
 8000bd4:	6939      	ldr	r1, [r7, #16]
 8000bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	2203      	movs	r2, #3
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f003 0203 	and.w	r2, r3, #3
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f000 809a 	beq.w	8000d50 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1c:	4b55      	ldr	r3, [pc, #340]	; (8000d74 <HAL_GPIO_Init+0x2cc>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a54      	ldr	r2, [pc, #336]	; (8000d74 <HAL_GPIO_Init+0x2cc>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b52      	ldr	r3, [pc, #328]	; (8000d74 <HAL_GPIO_Init+0x2cc>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c34:	4a50      	ldr	r2, [pc, #320]	; (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	089b      	lsrs	r3, r3, #2
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	f003 0303 	and.w	r3, r3, #3
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	220f      	movs	r2, #15
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c5e:	d013      	beq.n	8000c88 <HAL_GPIO_Init+0x1e0>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a46      	ldr	r2, [pc, #280]	; (8000d7c <HAL_GPIO_Init+0x2d4>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d00d      	beq.n	8000c84 <HAL_GPIO_Init+0x1dc>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a45      	ldr	r2, [pc, #276]	; (8000d80 <HAL_GPIO_Init+0x2d8>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d007      	beq.n	8000c80 <HAL_GPIO_Init+0x1d8>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a44      	ldr	r2, [pc, #272]	; (8000d84 <HAL_GPIO_Init+0x2dc>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d101      	bne.n	8000c7c <HAL_GPIO_Init+0x1d4>
 8000c78:	2303      	movs	r3, #3
 8000c7a:	e006      	b.n	8000c8a <HAL_GPIO_Init+0x1e2>
 8000c7c:	2305      	movs	r3, #5
 8000c7e:	e004      	b.n	8000c8a <HAL_GPIO_Init+0x1e2>
 8000c80:	2302      	movs	r3, #2
 8000c82:	e002      	b.n	8000c8a <HAL_GPIO_Init+0x1e2>
 8000c84:	2301      	movs	r3, #1
 8000c86:	e000      	b.n	8000c8a <HAL_GPIO_Init+0x1e2>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	f002 0203 	and.w	r2, r2, #3
 8000c90:	0092      	lsls	r2, r2, #2
 8000c92:	4093      	lsls	r3, r2
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c9a:	4937      	ldr	r1, [pc, #220]	; (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	089b      	lsrs	r3, r3, #2
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ca8:	4b37      	ldr	r3, [pc, #220]	; (8000d88 <HAL_GPIO_Init+0x2e0>)
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d003      	beq.n	8000ccc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ccc:	4a2e      	ldr	r2, [pc, #184]	; (8000d88 <HAL_GPIO_Init+0x2e0>)
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cd2:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <HAL_GPIO_Init+0x2e0>)
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cf6:	4a24      	ldr	r2, [pc, #144]	; (8000d88 <HAL_GPIO_Init+0x2e0>)
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cfc:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <HAL_GPIO_Init+0x2e0>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d003      	beq.n	8000d20 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d20:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <HAL_GPIO_Init+0x2e0>)
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <HAL_GPIO_Init+0x2e0>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d4a:	4a0f      	ldr	r2, [pc, #60]	; (8000d88 <HAL_GPIO_Init+0x2e0>)
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	3301      	adds	r3, #1
 8000d54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f47f aea9 	bne.w	8000ab8 <HAL_GPIO_Init+0x10>
  }
}
 8000d66:	bf00      	nop
 8000d68:	bf00      	nop
 8000d6a:	371c      	adds	r7, #28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010000 	.word	0x40010000
 8000d7c:	48000400 	.word	0x48000400
 8000d80:	48000800 	.word	0x48000800
 8000d84:	48000c00 	.word	0x48000c00
 8000d88:	40010400 	.word	0x40010400

08000d8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d101      	bne.n	8000d9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e081      	b.n	8000ea2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d106      	bne.n	8000db8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff fbe6 	bl	8000584 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2224      	movs	r2, #36	; 0x24
 8000dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f022 0201 	bic.w	r2, r2, #1
 8000dce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ddc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000dec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d107      	bne.n	8000e06 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	689a      	ldr	r2, [r3, #8]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	e006      	b.n	8000e14 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000e12:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d104      	bne.n	8000e26 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	6812      	ldr	r2, [r2, #0]
 8000e30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	691a      	ldr	r2, [r3, #16]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	430a      	orrs	r2, r1
 8000e62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69d9      	ldr	r1, [r3, #28]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a1a      	ldr	r2, [r3, #32]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	430a      	orrs	r2, r1
 8000e72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f042 0201 	orr.w	r2, r2, #1
 8000e82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2220      	movs	r2, #32
 8000e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af02      	add	r7, sp, #8
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	607a      	str	r2, [r7, #4]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	460b      	mov	r3, r1
 8000eba:	817b      	strh	r3, [r7, #10]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b20      	cmp	r3, #32
 8000eca:	f040 80da 	bne.w	8001082 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d101      	bne.n	8000edc <HAL_I2C_Master_Transmit+0x30>
 8000ed8:	2302      	movs	r3, #2
 8000eda:	e0d3      	b.n	8001084 <HAL_I2C_Master_Transmit+0x1d8>
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000ee4:	f7ff fcca 	bl	800087c <HAL_GetTick>
 8000ee8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2319      	movs	r3, #25
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ef6:	68f8      	ldr	r0, [r7, #12]
 8000ef8:	f000 f9e6 	bl	80012c8 <I2C_WaitOnFlagUntilTimeout>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e0be      	b.n	8001084 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2221      	movs	r2, #33	; 0x21
 8000f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2210      	movs	r2, #16
 8000f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	893a      	ldrh	r2, [r7, #8]
 8000f26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	2bff      	cmp	r3, #255	; 0xff
 8000f36:	d90e      	bls.n	8000f56 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	22ff      	movs	r2, #255	; 0xff
 8000f3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	8979      	ldrh	r1, [r7, #10]
 8000f46:	4b51      	ldr	r3, [pc, #324]	; (800108c <HAL_I2C_Master_Transmit+0x1e0>)
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f000 fbf6 	bl	8001740 <I2C_TransferConfig>
 8000f54:	e06c      	b.n	8001030 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	8979      	ldrh	r1, [r7, #10]
 8000f68:	4b48      	ldr	r3, [pc, #288]	; (800108c <HAL_I2C_Master_Transmit+0x1e0>)
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f000 fbe5 	bl	8001740 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8000f76:	e05b      	b.n	8001030 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f78:	697a      	ldr	r2, [r7, #20]
 8000f7a:	6a39      	ldr	r1, [r7, #32]
 8000f7c:	68f8      	ldr	r0, [r7, #12]
 8000f7e:	f000 f9f2 	bl	8001366 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e07b      	b.n	8001084 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f90:	781a      	ldrb	r2, [r3, #0]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9c:	1c5a      	adds	r2, r3, #1
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d034      	beq.n	8001030 <HAL_I2C_Master_Transmit+0x184>
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d130      	bne.n	8001030 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	6a3b      	ldr	r3, [r7, #32]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2180      	movs	r1, #128	; 0x80
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f000 f975 	bl	80012c8 <I2C_WaitOnFlagUntilTimeout>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e04d      	b.n	8001084 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	2bff      	cmp	r3, #255	; 0xff
 8000ff0:	d90e      	bls.n	8001010 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	22ff      	movs	r2, #255	; 0xff
 8000ff6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	8979      	ldrh	r1, [r7, #10]
 8001000:	2300      	movs	r3, #0
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f000 fb99 	bl	8001740 <I2C_TransferConfig>
 800100e:	e00f      	b.n	8001030 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001014:	b29a      	uxth	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800101e:	b2da      	uxtb	r2, r3
 8001020:	8979      	ldrh	r1, [r7, #10]
 8001022:	2300      	movs	r3, #0
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f000 fb88 	bl	8001740 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001034:	b29b      	uxth	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d19e      	bne.n	8000f78 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	6a39      	ldr	r1, [r7, #32]
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f000 f9d8 	bl	80013f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e01a      	b.n	8001084 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2220      	movs	r2, #32
 8001054:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6859      	ldr	r1, [r3, #4]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_I2C_Master_Transmit+0x1e4>)
 8001062:	400b      	ands	r3, r1
 8001064:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2220      	movs	r2, #32
 800106a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e000      	b.n	8001084 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001082:	2302      	movs	r3, #2
  }
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	80002000 	.word	0x80002000
 8001090:	fe00e800 	.word	0xfe00e800

08001094 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af02      	add	r7, sp, #8
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	461a      	mov	r2, r3
 80010a0:	460b      	mov	r3, r1
 80010a2:	817b      	strh	r3, [r7, #10]
 80010a4:	4613      	mov	r3, r2
 80010a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b20      	cmp	r3, #32
 80010b2:	f040 80db 	bne.w	800126c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d101      	bne.n	80010c4 <HAL_I2C_Master_Receive+0x30>
 80010c0:	2302      	movs	r3, #2
 80010c2:	e0d4      	b.n	800126e <HAL_I2C_Master_Receive+0x1da>
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80010cc:	f7ff fbd6 	bl	800087c <HAL_GetTick>
 80010d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2319      	movs	r3, #25
 80010d8:	2201      	movs	r2, #1
 80010da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f000 f8f2 	bl	80012c8 <I2C_WaitOnFlagUntilTimeout>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e0bf      	b.n	800126e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2222      	movs	r2, #34	; 0x22
 80010f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2210      	movs	r2, #16
 80010fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2200      	movs	r2, #0
 8001102:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	893a      	ldrh	r2, [r7, #8]
 800110e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2200      	movs	r2, #0
 8001114:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800111a:	b29b      	uxth	r3, r3
 800111c:	2bff      	cmp	r3, #255	; 0xff
 800111e:	d90e      	bls.n	800113e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	22ff      	movs	r2, #255	; 0xff
 8001124:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800112a:	b2da      	uxtb	r2, r3
 800112c:	8979      	ldrh	r1, [r7, #10]
 800112e:	4b52      	ldr	r3, [pc, #328]	; (8001278 <HAL_I2C_Master_Receive+0x1e4>)
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f000 fb02 	bl	8001740 <I2C_TransferConfig>
 800113c:	e06d      	b.n	800121a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001142:	b29a      	uxth	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800114c:	b2da      	uxtb	r2, r3
 800114e:	8979      	ldrh	r1, [r7, #10]
 8001150:	4b49      	ldr	r3, [pc, #292]	; (8001278 <HAL_I2C_Master_Receive+0x1e4>)
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f000 faf1 	bl	8001740 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800115e:	e05c      	b.n	800121a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	6a39      	ldr	r1, [r7, #32]
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f000 f989 	bl	800147c <I2C_WaitOnRXNEFlagUntilTimeout>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e07c      	b.n	800126e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001190:	3b01      	subs	r3, #1
 8001192:	b29a      	uxth	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800119c:	b29b      	uxth	r3, r3
 800119e:	3b01      	subs	r3, #1
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d034      	beq.n	800121a <HAL_I2C_Master_Receive+0x186>
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d130      	bne.n	800121a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	6a3b      	ldr	r3, [r7, #32]
 80011be:	2200      	movs	r2, #0
 80011c0:	2180      	movs	r1, #128	; 0x80
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f000 f880 	bl	80012c8 <I2C_WaitOnFlagUntilTimeout>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e04d      	b.n	800126e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	2bff      	cmp	r3, #255	; 0xff
 80011da:	d90e      	bls.n	80011fa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	22ff      	movs	r2, #255	; 0xff
 80011e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	8979      	ldrh	r1, [r7, #10]
 80011ea:	2300      	movs	r3, #0
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f000 faa4 	bl	8001740 <I2C_TransferConfig>
 80011f8:	e00f      	b.n	800121a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011fe:	b29a      	uxth	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001208:	b2da      	uxtb	r2, r3
 800120a:	8979      	ldrh	r1, [r7, #10]
 800120c:	2300      	movs	r3, #0
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f000 fa93 	bl	8001740 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800121e:	b29b      	uxth	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d19d      	bne.n	8001160 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	6a39      	ldr	r1, [r7, #32]
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f000 f8e3 	bl	80013f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e01a      	b.n	800126e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2220      	movs	r2, #32
 800123e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6859      	ldr	r1, [r3, #4]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <HAL_I2C_Master_Receive+0x1e8>)
 800124c:	400b      	ands	r3, r1
 800124e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2220      	movs	r2, #32
 8001254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	e000      	b.n	800126e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800126c:	2302      	movs	r3, #2
  }
}
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	80002400 	.word	0x80002400
 800127c:	fe00e800 	.word	0xfe00e800

08001280 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b02      	cmp	r3, #2
 8001294:	d103      	bne.n	800129e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2200      	movs	r2, #0
 800129c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d007      	beq.n	80012bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	699a      	ldr	r2, [r3, #24]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f042 0201 	orr.w	r2, r2, #1
 80012ba:	619a      	str	r2, [r3, #24]
  }
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	4613      	mov	r3, r2
 80012d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012d8:	e031      	b.n	800133e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e0:	d02d      	beq.n	800133e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012e2:	f7ff facb 	bl	800087c <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d302      	bcc.n	80012f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d122      	bne.n	800133e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	699a      	ldr	r2, [r3, #24]
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	4013      	ands	r3, r2
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	429a      	cmp	r2, r3
 8001306:	bf0c      	ite	eq
 8001308:	2301      	moveq	r3, #1
 800130a:	2300      	movne	r3, #0
 800130c:	b2db      	uxtb	r3, r3
 800130e:	461a      	mov	r2, r3
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	429a      	cmp	r2, r3
 8001314:	d113      	bne.n	800133e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f043 0220 	orr.w	r2, r3, #32
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2220      	movs	r2, #32
 8001326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e00f      	b.n	800135e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	699a      	ldr	r2, [r3, #24]
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4013      	ands	r3, r2
 8001348:	68ba      	ldr	r2, [r7, #8]
 800134a:	429a      	cmp	r2, r3
 800134c:	bf0c      	ite	eq
 800134e:	2301      	moveq	r3, #1
 8001350:	2300      	movne	r3, #0
 8001352:	b2db      	uxtb	r3, r3
 8001354:	461a      	mov	r2, r3
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	429a      	cmp	r2, r3
 800135a:	d0be      	beq.n	80012da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b084      	sub	sp, #16
 800136a:	af00      	add	r7, sp, #0
 800136c:	60f8      	str	r0, [r7, #12]
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001372:	e033      	b.n	80013dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	68b9      	ldr	r1, [r7, #8]
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f000 f901 	bl	8001580 <I2C_IsErrorOccurred>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e031      	b.n	80013ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800138e:	d025      	beq.n	80013dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001390:	f7ff fa74 	bl	800087c <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	429a      	cmp	r2, r3
 800139e:	d302      	bcc.n	80013a6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d11a      	bne.n	80013dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d013      	beq.n	80013dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b8:	f043 0220 	orr.w	r2, r3, #32
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2220      	movs	r2, #32
 80013c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e007      	b.n	80013ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d1c4      	bne.n	8001374 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001400:	e02f      	b.n	8001462 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	68b9      	ldr	r1, [r7, #8]
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f000 f8ba 	bl	8001580 <I2C_IsErrorOccurred>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e02d      	b.n	8001472 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001416:	f7ff fa31 	bl	800087c <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	68ba      	ldr	r2, [r7, #8]
 8001422:	429a      	cmp	r2, r3
 8001424:	d302      	bcc.n	800142c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d11a      	bne.n	8001462 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	f003 0320 	and.w	r3, r3, #32
 8001436:	2b20      	cmp	r3, #32
 8001438:	d013      	beq.n	8001462 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f043 0220 	orr.w	r2, r3, #32
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2220      	movs	r2, #32
 800144a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e007      	b.n	8001472 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f003 0320 	and.w	r3, r3, #32
 800146c:	2b20      	cmp	r3, #32
 800146e:	d1c8      	bne.n	8001402 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001488:	e06b      	b.n	8001562 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	68b9      	ldr	r1, [r7, #8]
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f000 f876 	bl	8001580 <I2C_IsErrorOccurred>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e069      	b.n	8001572 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0320 	and.w	r3, r3, #32
 80014a8:	2b20      	cmp	r3, #32
 80014aa:	d138      	bne.n	800151e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d105      	bne.n	80014c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	e055      	b.n	8001572 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0310 	and.w	r3, r3, #16
 80014d0:	2b10      	cmp	r3, #16
 80014d2:	d107      	bne.n	80014e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2210      	movs	r2, #16
 80014da:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2204      	movs	r2, #4
 80014e0:	645a      	str	r2, [r3, #68]	; 0x44
 80014e2:	e002      	b.n	80014ea <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2200      	movs	r2, #0
 80014e8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2220      	movs	r2, #32
 80014f0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6859      	ldr	r1, [r3, #4]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80014fe:	400b      	ands	r3, r1
 8001500:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2220      	movs	r2, #32
 8001506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e029      	b.n	8001572 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800151e:	f7ff f9ad 	bl	800087c <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	68ba      	ldr	r2, [r7, #8]
 800152a:	429a      	cmp	r2, r3
 800152c:	d302      	bcc.n	8001534 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d116      	bne.n	8001562 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	2b04      	cmp	r3, #4
 8001540:	d00f      	beq.n	8001562 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f043 0220 	orr.w	r2, r3, #32
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2220      	movs	r2, #32
 8001552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e007      	b.n	8001572 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b04      	cmp	r3, #4
 800156e:	d18c      	bne.n	800148a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	fe00e800 	.word	0xfe00e800

08001580 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800158c:	2300      	movs	r3, #0
 800158e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	f003 0310 	and.w	r3, r3, #16
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d068      	beq.n	800167e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2210      	movs	r2, #16
 80015b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80015b4:	e049      	b.n	800164a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015bc:	d045      	beq.n	800164a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80015be:	f7ff f95d 	bl	800087c <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d302      	bcc.n	80015d4 <I2C_IsErrorOccurred+0x54>
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d13a      	bne.n	800164a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80015e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015f6:	d121      	bne.n	800163c <I2C_IsErrorOccurred+0xbc>
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015fe:	d01d      	beq.n	800163c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001600:	7cfb      	ldrb	r3, [r7, #19]
 8001602:	2b20      	cmp	r3, #32
 8001604:	d01a      	beq.n	800163c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001614:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001616:	f7ff f931 	bl	800087c <HAL_GetTick>
 800161a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800161c:	e00e      	b.n	800163c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800161e:	f7ff f92d 	bl	800087c <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b19      	cmp	r3, #25
 800162a:	d907      	bls.n	800163c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	f043 0320 	orr.w	r3, r3, #32
 8001632:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800163a:	e006      	b.n	800164a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	f003 0320 	and.w	r3, r3, #32
 8001646:	2b20      	cmp	r3, #32
 8001648:	d1e9      	bne.n	800161e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f003 0320 	and.w	r3, r3, #32
 8001654:	2b20      	cmp	r3, #32
 8001656:	d003      	beq.n	8001660 <I2C_IsErrorOccurred+0xe0>
 8001658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0aa      	beq.n	80015b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001664:	2b00      	cmp	r3, #0
 8001666:	d103      	bne.n	8001670 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2220      	movs	r2, #32
 800166e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	f043 0304 	orr.w	r3, r3, #4
 8001676:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00b      	beq.n	80016a8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00b      	beq.n	80016ca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	f043 0308 	orr.w	r3, r3, #8
 80016b8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00b      	beq.n	80016ec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80016d4:	6a3b      	ldr	r3, [r7, #32]
 80016d6:	f043 0302 	orr.w	r3, r3, #2
 80016da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80016ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d01c      	beq.n	800172e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f7ff fdc3 	bl	8001280 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6859      	ldr	r1, [r3, #4]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b0d      	ldr	r3, [pc, #52]	; (800173c <I2C_IsErrorOccurred+0x1bc>)
 8001706:	400b      	ands	r3, r1
 8001708:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800170e:	6a3b      	ldr	r3, [r7, #32]
 8001710:	431a      	orrs	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2220      	movs	r2, #32
 800171a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800172e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001732:	4618      	mov	r0, r3
 8001734:	3728      	adds	r7, #40	; 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	fe00e800 	.word	0xfe00e800

08001740 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001740:	b480      	push	{r7}
 8001742:	b087      	sub	sp, #28
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	460b      	mov	r3, r1
 800174c:	817b      	strh	r3, [r7, #10]
 800174e:	4613      	mov	r3, r2
 8001750:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001752:	897b      	ldrh	r3, [r7, #10]
 8001754:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001758:	7a7b      	ldrb	r3, [r7, #9]
 800175a:	041b      	lsls	r3, r3, #16
 800175c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001760:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	4313      	orrs	r3, r2
 800176a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800176e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	6a3b      	ldr	r3, [r7, #32]
 8001778:	0d5b      	lsrs	r3, r3, #21
 800177a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800177e:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <I2C_TransferConfig+0x60>)
 8001780:	430b      	orrs	r3, r1
 8001782:	43db      	mvns	r3, r3
 8001784:	ea02 0103 	and.w	r1, r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	430a      	orrs	r2, r1
 8001790:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001792:	bf00      	nop
 8001794:	371c      	adds	r7, #28
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	03ff63ff 	.word	0x03ff63ff

080017a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b20      	cmp	r3, #32
 80017b8:	d138      	bne.n	800182c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d101      	bne.n	80017c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80017c4:	2302      	movs	r3, #2
 80017c6:	e032      	b.n	800182e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2224      	movs	r2, #36	; 0x24
 80017d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0201 	bic.w	r2, r2, #1
 80017e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6819      	ldr	r1, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 0201 	orr.w	r2, r2, #1
 8001816:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2220      	movs	r2, #32
 800181c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001828:	2300      	movs	r3, #0
 800182a:	e000      	b.n	800182e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800182c:	2302      	movs	r3, #2
  }
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800183a:	b480      	push	{r7}
 800183c:	b085      	sub	sp, #20
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b20      	cmp	r3, #32
 800184e:	d139      	bne.n	80018c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001856:	2b01      	cmp	r3, #1
 8001858:	d101      	bne.n	800185e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800185a:	2302      	movs	r3, #2
 800185c:	e033      	b.n	80018c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2224      	movs	r2, #36	; 0x24
 800186a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0201 	bic.w	r2, r2, #1
 800187c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800188c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	021b      	lsls	r3, r3, #8
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	4313      	orrs	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f042 0201 	orr.w	r2, r2, #1
 80018ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2220      	movs	r2, #32
 80018b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	e000      	b.n	80018c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80018c4:	2302      	movs	r3, #2
  }
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80018da:	af00      	add	r7, sp, #0
 80018dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018e4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d102      	bne.n	80018fa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	f001 b823 	b.w	8002940 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 817d 	beq.w	8001c0a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001910:	4bbc      	ldr	r3, [pc, #752]	; (8001c04 <HAL_RCC_OscConfig+0x330>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 030c 	and.w	r3, r3, #12
 8001918:	2b04      	cmp	r3, #4
 800191a:	d00c      	beq.n	8001936 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800191c:	4bb9      	ldr	r3, [pc, #740]	; (8001c04 <HAL_RCC_OscConfig+0x330>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 030c 	and.w	r3, r3, #12
 8001924:	2b08      	cmp	r3, #8
 8001926:	d15c      	bne.n	80019e2 <HAL_RCC_OscConfig+0x10e>
 8001928:	4bb6      	ldr	r3, [pc, #728]	; (8001c04 <HAL_RCC_OscConfig+0x330>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001934:	d155      	bne.n	80019e2 <HAL_RCC_OscConfig+0x10e>
 8001936:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800193a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001942:	fa93 f3a3 	rbit	r3, r3
 8001946:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800194a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194e:	fab3 f383 	clz	r3, r3
 8001952:	b2db      	uxtb	r3, r3
 8001954:	095b      	lsrs	r3, r3, #5
 8001956:	b2db      	uxtb	r3, r3
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b01      	cmp	r3, #1
 8001960:	d102      	bne.n	8001968 <HAL_RCC_OscConfig+0x94>
 8001962:	4ba8      	ldr	r3, [pc, #672]	; (8001c04 <HAL_RCC_OscConfig+0x330>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	e015      	b.n	8001994 <HAL_RCC_OscConfig+0xc0>
 8001968:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800196c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001970:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001974:	fa93 f3a3 	rbit	r3, r3
 8001978:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800197c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001980:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001984:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001988:	fa93 f3a3 	rbit	r3, r3
 800198c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001990:	4b9c      	ldr	r3, [pc, #624]	; (8001c04 <HAL_RCC_OscConfig+0x330>)
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001998:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800199c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80019a0:	fa92 f2a2 	rbit	r2, r2
 80019a4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80019a8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80019ac:	fab2 f282 	clz	r2, r2
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	f042 0220 	orr.w	r2, r2, #32
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	f002 021f 	and.w	r2, r2, #31
 80019bc:	2101      	movs	r1, #1
 80019be:	fa01 f202 	lsl.w	r2, r1, r2
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 811f 	beq.w	8001c08 <HAL_RCC_OscConfig+0x334>
 80019ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f040 8116 	bne.w	8001c08 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	f000 bfaf 	b.w	8002940 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f2:	d106      	bne.n	8001a02 <HAL_RCC_OscConfig+0x12e>
 80019f4:	4b83      	ldr	r3, [pc, #524]	; (8001c04 <HAL_RCC_OscConfig+0x330>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a82      	ldr	r2, [pc, #520]	; (8001c04 <HAL_RCC_OscConfig+0x330>)
 80019fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	e036      	b.n	8001a70 <HAL_RCC_OscConfig+0x19c>
 8001a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x158>
 8001a12:	4b7c      	ldr	r3, [pc, #496]	; (8001c04 <HAL_RCC_OscConfig+0x330>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a7b      	ldr	r2, [pc, #492]	; (8001c04 <HAL_RCC_OscConfig+0x330>)
 8001a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	4b79      	ldr	r3, [pc, #484]	; (8001c04 <HAL_RCC_OscConfig+0x330>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a78      	ldr	r2, [pc, #480]	; (8001c04 <HAL_RCC_OscConfig+0x330>)
 8001a24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	e021      	b.n	8001a70 <HAL_RCC_OscConfig+0x19c>
 8001a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a3c:	d10c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x184>
 8001a3e:	4b71      	ldr	r3, [pc, #452]	; (8001c04 <HAL_RCC_OscConfig+0x330>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a70      	ldr	r2, [pc, #448]	; (8001c04 <HAL_RCC_OscConfig+0x330>)
 8001a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	4b6e      	ldr	r3, [pc, #440]	; (8001c04 <HAL_RCC_OscConfig+0x330>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a6d      	ldr	r2, [pc, #436]	; (8001c04 <HAL_RCC_OscConfig+0x330>)
 8001a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	e00b      	b.n	8001a70 <HAL_RCC_OscConfig+0x19c>
 8001a58:	4b6a      	ldr	r3, [pc, #424]	; (8001c04 <HAL_RCC_OscConfig+0x330>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a69      	ldr	r2, [pc, #420]	; (8001c04 <HAL_RCC_OscConfig+0x330>)
 8001a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	4b67      	ldr	r3, [pc, #412]	; (8001c04 <HAL_RCC_OscConfig+0x330>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a66      	ldr	r2, [pc, #408]	; (8001c04 <HAL_RCC_OscConfig+0x330>)
 8001a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a6e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a70:	4b64      	ldr	r3, [pc, #400]	; (8001c04 <HAL_RCC_OscConfig+0x330>)
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	f023 020f 	bic.w	r2, r3, #15
 8001a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	495f      	ldr	r1, [pc, #380]	; (8001c04 <HAL_RCC_OscConfig+0x330>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d059      	beq.n	8001b4e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9a:	f7fe feef 	bl	800087c <HAL_GetTick>
 8001a9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa2:	e00a      	b.n	8001aba <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa4:	f7fe feea 	bl	800087c <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b64      	cmp	r3, #100	; 0x64
 8001ab2:	d902      	bls.n	8001aba <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	f000 bf43 	b.w	8002940 <HAL_RCC_OscConfig+0x106c>
 8001aba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001abe:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001ace:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad2:	fab3 f383 	clz	r3, r3
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	095b      	lsrs	r3, r3, #5
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d102      	bne.n	8001aec <HAL_RCC_OscConfig+0x218>
 8001ae6:	4b47      	ldr	r3, [pc, #284]	; (8001c04 <HAL_RCC_OscConfig+0x330>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	e015      	b.n	8001b18 <HAL_RCC_OscConfig+0x244>
 8001aec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001af0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001af8:	fa93 f3a3 	rbit	r3, r3
 8001afc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001b00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b04:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001b08:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001b0c:	fa93 f3a3 	rbit	r3, r3
 8001b10:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001b14:	4b3b      	ldr	r3, [pc, #236]	; (8001c04 <HAL_RCC_OscConfig+0x330>)
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b1c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001b20:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001b24:	fa92 f2a2 	rbit	r2, r2
 8001b28:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001b2c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001b30:	fab2 f282 	clz	r2, r2
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	f042 0220 	orr.w	r2, r2, #32
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	f002 021f 	and.w	r2, r2, #31
 8001b40:	2101      	movs	r1, #1
 8001b42:	fa01 f202 	lsl.w	r2, r1, r2
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0ab      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x1d0>
 8001b4c:	e05d      	b.n	8001c0a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4e:	f7fe fe95 	bl	800087c <HAL_GetTick>
 8001b52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b56:	e00a      	b.n	8001b6e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b58:	f7fe fe90 	bl	800087c <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b64      	cmp	r3, #100	; 0x64
 8001b66:	d902      	bls.n	8001b6e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	f000 bee9 	b.w	8002940 <HAL_RCC_OscConfig+0x106c>
 8001b6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b72:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b76:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001b7a:	fa93 f3a3 	rbit	r3, r3
 8001b7e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001b82:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b86:	fab3 f383 	clz	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	095b      	lsrs	r3, r3, #5
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d102      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x2cc>
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <HAL_RCC_OscConfig+0x330>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	e015      	b.n	8001bcc <HAL_RCC_OscConfig+0x2f8>
 8001ba0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ba4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001bac:	fa93 f3a3 	rbit	r3, r3
 8001bb0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bb8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001bbc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001bc0:	fa93 f3a3 	rbit	r3, r3
 8001bc4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001bc8:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <HAL_RCC_OscConfig+0x330>)
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bd0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001bd4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001bd8:	fa92 f2a2 	rbit	r2, r2
 8001bdc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001be0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001be4:	fab2 f282 	clz	r2, r2
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	f042 0220 	orr.w	r2, r2, #32
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	f002 021f 	and.w	r2, r2, #31
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1ab      	bne.n	8001b58 <HAL_RCC_OscConfig+0x284>
 8001c00:	e003      	b.n	8001c0a <HAL_RCC_OscConfig+0x336>
 8001c02:	bf00      	nop
 8001c04:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 817d 	beq.w	8001f1a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c20:	4ba6      	ldr	r3, [pc, #664]	; (8001ebc <HAL_RCC_OscConfig+0x5e8>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 030c 	and.w	r3, r3, #12
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00b      	beq.n	8001c44 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c2c:	4ba3      	ldr	r3, [pc, #652]	; (8001ebc <HAL_RCC_OscConfig+0x5e8>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 030c 	and.w	r3, r3, #12
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d172      	bne.n	8001d1e <HAL_RCC_OscConfig+0x44a>
 8001c38:	4ba0      	ldr	r3, [pc, #640]	; (8001ebc <HAL_RCC_OscConfig+0x5e8>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d16c      	bne.n	8001d1e <HAL_RCC_OscConfig+0x44a>
 8001c44:	2302      	movs	r3, #2
 8001c46:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001c4e:	fa93 f3a3 	rbit	r3, r3
 8001c52:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001c56:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5a:	fab3 f383 	clz	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	095b      	lsrs	r3, r3, #5
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d102      	bne.n	8001c74 <HAL_RCC_OscConfig+0x3a0>
 8001c6e:	4b93      	ldr	r3, [pc, #588]	; (8001ebc <HAL_RCC_OscConfig+0x5e8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	e013      	b.n	8001c9c <HAL_RCC_OscConfig+0x3c8>
 8001c74:	2302      	movs	r3, #2
 8001c76:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001c7e:	fa93 f3a3 	rbit	r3, r3
 8001c82:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001c86:	2302      	movs	r3, #2
 8001c88:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001c8c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001c98:	4b88      	ldr	r3, [pc, #544]	; (8001ebc <HAL_RCC_OscConfig+0x5e8>)
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001ca2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001ca6:	fa92 f2a2 	rbit	r2, r2
 8001caa:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001cae:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001cb2:	fab2 f282 	clz	r2, r2
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	f042 0220 	orr.w	r2, r2, #32
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	f002 021f 	and.w	r2, r2, #31
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00a      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x410>
 8001cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d002      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	f000 be2e 	b.w	8002940 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce4:	4b75      	ldr	r3, [pc, #468]	; (8001ebc <HAL_RCC_OscConfig+0x5e8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	21f8      	movs	r1, #248	; 0xf8
 8001cfa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfe:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001d02:	fa91 f1a1 	rbit	r1, r1
 8001d06:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001d0a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001d0e:	fab1 f181 	clz	r1, r1
 8001d12:	b2c9      	uxtb	r1, r1
 8001d14:	408b      	lsls	r3, r1
 8001d16:	4969      	ldr	r1, [pc, #420]	; (8001ebc <HAL_RCC_OscConfig+0x5e8>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1c:	e0fd      	b.n	8001f1a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 8088 	beq.w	8001e40 <HAL_RCC_OscConfig+0x56c>
 8001d30:	2301      	movs	r3, #1
 8001d32:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001d3a:	fa93 f3a3 	rbit	r3, r3
 8001d3e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001d42:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d46:	fab3 f383 	clz	r3, r3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	461a      	mov	r2, r3
 8001d58:	2301      	movs	r3, #1
 8001d5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5c:	f7fe fd8e 	bl	800087c <HAL_GetTick>
 8001d60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d64:	e00a      	b.n	8001d7c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d66:	f7fe fd89 	bl	800087c <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d902      	bls.n	8001d7c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	f000 bde2 	b.w	8002940 <HAL_RCC_OscConfig+0x106c>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001d86:	fa93 f3a3 	rbit	r3, r3
 8001d8a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001d8e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d92:	fab3 f383 	clz	r3, r3
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	095b      	lsrs	r3, r3, #5
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d102      	bne.n	8001dac <HAL_RCC_OscConfig+0x4d8>
 8001da6:	4b45      	ldr	r3, [pc, #276]	; (8001ebc <HAL_RCC_OscConfig+0x5e8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	e013      	b.n	8001dd4 <HAL_RCC_OscConfig+0x500>
 8001dac:	2302      	movs	r3, #2
 8001dae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001db6:	fa93 f3a3 	rbit	r3, r3
 8001dba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001dc4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001dc8:	fa93 f3a3 	rbit	r3, r3
 8001dcc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001dd0:	4b3a      	ldr	r3, [pc, #232]	; (8001ebc <HAL_RCC_OscConfig+0x5e8>)
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001dda:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001dde:	fa92 f2a2 	rbit	r2, r2
 8001de2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001de6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001dea:	fab2 f282 	clz	r2, r2
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	f042 0220 	orr.w	r2, r2, #32
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	f002 021f 	and.w	r2, r2, #31
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0af      	beq.n	8001d66 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e06:	4b2d      	ldr	r3, [pc, #180]	; (8001ebc <HAL_RCC_OscConfig+0x5e8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	21f8      	movs	r1, #248	; 0xf8
 8001e1c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e20:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001e24:	fa91 f1a1 	rbit	r1, r1
 8001e28:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001e2c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001e30:	fab1 f181 	clz	r1, r1
 8001e34:	b2c9      	uxtb	r1, r1
 8001e36:	408b      	lsls	r3, r1
 8001e38:	4920      	ldr	r1, [pc, #128]	; (8001ebc <HAL_RCC_OscConfig+0x5e8>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]
 8001e3e:	e06c      	b.n	8001f1a <HAL_RCC_OscConfig+0x646>
 8001e40:	2301      	movs	r3, #1
 8001e42:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001e52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e56:	fab3 f383 	clz	r3, r3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	461a      	mov	r2, r3
 8001e68:	2300      	movs	r3, #0
 8001e6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6c:	f7fe fd06 	bl	800087c <HAL_GetTick>
 8001e70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e74:	e00a      	b.n	8001e8c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e76:	f7fe fd01 	bl	800087c <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d902      	bls.n	8001e8c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	f000 bd5a 	b.w	8002940 <HAL_RCC_OscConfig+0x106c>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001e9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	095b      	lsrs	r3, r3, #5
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d104      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x5ec>
 8001eb6:	4b01      	ldr	r3, [pc, #4]	; (8001ebc <HAL_RCC_OscConfig+0x5e8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	e015      	b.n	8001ee8 <HAL_RCC_OscConfig+0x614>
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001ed8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001edc:	fa93 f3a3 	rbit	r3, r3
 8001ee0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001ee4:	4bc8      	ldr	r3, [pc, #800]	; (8002208 <HAL_RCC_OscConfig+0x934>)
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	2202      	movs	r2, #2
 8001eea:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001eee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ef2:	fa92 f2a2 	rbit	r2, r2
 8001ef6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001efa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001efe:	fab2 f282 	clz	r2, r2
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	f042 0220 	orr.w	r2, r2, #32
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	f002 021f 	and.w	r2, r2, #31
 8001f0e:	2101      	movs	r1, #1
 8001f10:	fa01 f202 	lsl.w	r2, r1, r2
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1ad      	bne.n	8001e76 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 8110 	beq.w	8002150 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d079      	beq.n	8002034 <HAL_RCC_OscConfig+0x760>
 8001f40:	2301      	movs	r3, #1
 8001f42:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f56:	fab3 f383 	clz	r3, r3
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4bab      	ldr	r3, [pc, #684]	; (800220c <HAL_RCC_OscConfig+0x938>)
 8001f60:	4413      	add	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	461a      	mov	r2, r3
 8001f66:	2301      	movs	r3, #1
 8001f68:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6a:	f7fe fc87 	bl	800087c <HAL_GetTick>
 8001f6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f74:	f7fe fc82 	bl	800087c <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d902      	bls.n	8001f8a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	f000 bcdb 	b.w	8002940 <HAL_RCC_OscConfig+0x106c>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001f94:	fa93 f3a3 	rbit	r3, r3
 8001f98:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	fa93 f2a3 	rbit	r2, r3
 8001fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001fc8:	2202      	movs	r2, #2
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	fa93 f2a3 	rbit	r2, r3
 8001fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fde:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001fe2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe4:	4b88      	ldr	r3, [pc, #544]	; (8002208 <HAL_RCC_OscConfig+0x934>)
 8001fe6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ff0:	2102      	movs	r1, #2
 8001ff2:	6019      	str	r1, [r3, #0]
 8001ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	fa93 f1a3 	rbit	r1, r3
 8002002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002006:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800200a:	6019      	str	r1, [r3, #0]
  return result;
 800200c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002010:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	fab3 f383 	clz	r3, r3
 800201a:	b2db      	uxtb	r3, r3
 800201c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002020:	b2db      	uxtb	r3, r3
 8002022:	f003 031f 	and.w	r3, r3, #31
 8002026:	2101      	movs	r1, #1
 8002028:	fa01 f303 	lsl.w	r3, r1, r3
 800202c:	4013      	ands	r3, r2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0a0      	beq.n	8001f74 <HAL_RCC_OscConfig+0x6a0>
 8002032:	e08d      	b.n	8002150 <HAL_RCC_OscConfig+0x87c>
 8002034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002038:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800203c:	2201      	movs	r2, #1
 800203e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002044:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	fa93 f2a3 	rbit	r2, r3
 800204e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002052:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002056:	601a      	str	r2, [r3, #0]
  return result;
 8002058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002060:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002062:	fab3 f383 	clz	r3, r3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	461a      	mov	r2, r3
 800206a:	4b68      	ldr	r3, [pc, #416]	; (800220c <HAL_RCC_OscConfig+0x938>)
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	461a      	mov	r2, r3
 8002072:	2300      	movs	r3, #0
 8002074:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002076:	f7fe fc01 	bl	800087c <HAL_GetTick>
 800207a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800207e:	e00a      	b.n	8002096 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002080:	f7fe fbfc 	bl	800087c <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d902      	bls.n	8002096 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	f000 bc55 	b.w	8002940 <HAL_RCC_OscConfig+0x106c>
 8002096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800209e:	2202      	movs	r2, #2
 80020a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	fa93 f2a3 	rbit	r2, r3
 80020b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80020c2:	2202      	movs	r2, #2
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	fa93 f2a3 	rbit	r2, r3
 80020d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80020e6:	2202      	movs	r2, #2
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	fa93 f2a3 	rbit	r2, r3
 80020f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002100:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002102:	4b41      	ldr	r3, [pc, #260]	; (8002208 <HAL_RCC_OscConfig+0x934>)
 8002104:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800210e:	2102      	movs	r1, #2
 8002110:	6019      	str	r1, [r3, #0]
 8002112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002116:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	fa93 f1a3 	rbit	r1, r3
 8002120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002124:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002128:	6019      	str	r1, [r3, #0]
  return result;
 800212a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	fab3 f383 	clz	r3, r3
 8002138:	b2db      	uxtb	r3, r3
 800213a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800213e:	b2db      	uxtb	r3, r3
 8002140:	f003 031f 	and.w	r3, r3, #31
 8002144:	2101      	movs	r1, #1
 8002146:	fa01 f303 	lsl.w	r3, r1, r3
 800214a:	4013      	ands	r3, r2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d197      	bne.n	8002080 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002154:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 81a1 	beq.w	80024a8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800216c:	4b26      	ldr	r3, [pc, #152]	; (8002208 <HAL_RCC_OscConfig+0x934>)
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d116      	bne.n	80021a6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002178:	4b23      	ldr	r3, [pc, #140]	; (8002208 <HAL_RCC_OscConfig+0x934>)
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	4a22      	ldr	r2, [pc, #136]	; (8002208 <HAL_RCC_OscConfig+0x934>)
 800217e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002182:	61d3      	str	r3, [r2, #28]
 8002184:	4b20      	ldr	r3, [pc, #128]	; (8002208 <HAL_RCC_OscConfig+0x934>)
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800218c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002190:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800219e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80021a0:	2301      	movs	r3, #1
 80021a2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a6:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <HAL_RCC_OscConfig+0x93c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d11a      	bne.n	80021e8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021b2:	4b17      	ldr	r3, [pc, #92]	; (8002210 <HAL_RCC_OscConfig+0x93c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a16      	ldr	r2, [pc, #88]	; (8002210 <HAL_RCC_OscConfig+0x93c>)
 80021b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021be:	f7fe fb5d 	bl	800087c <HAL_GetTick>
 80021c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c6:	e009      	b.n	80021dc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c8:	f7fe fb58 	bl	800087c <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b64      	cmp	r3, #100	; 0x64
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e3b1      	b.n	8002940 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021dc:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <HAL_RCC_OscConfig+0x93c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0ef      	beq.n	80021c8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d10d      	bne.n	8002214 <HAL_RCC_OscConfig+0x940>
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <HAL_RCC_OscConfig+0x934>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4a02      	ldr	r2, [pc, #8]	; (8002208 <HAL_RCC_OscConfig+0x934>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6213      	str	r3, [r2, #32]
 8002204:	e03c      	b.n	8002280 <HAL_RCC_OscConfig+0x9ac>
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000
 800220c:	10908120 	.word	0x10908120
 8002210:	40007000 	.word	0x40007000
 8002214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002218:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10c      	bne.n	800223e <HAL_RCC_OscConfig+0x96a>
 8002224:	4bc1      	ldr	r3, [pc, #772]	; (800252c <HAL_RCC_OscConfig+0xc58>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	4ac0      	ldr	r2, [pc, #768]	; (800252c <HAL_RCC_OscConfig+0xc58>)
 800222a:	f023 0301 	bic.w	r3, r3, #1
 800222e:	6213      	str	r3, [r2, #32]
 8002230:	4bbe      	ldr	r3, [pc, #760]	; (800252c <HAL_RCC_OscConfig+0xc58>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	4abd      	ldr	r2, [pc, #756]	; (800252c <HAL_RCC_OscConfig+0xc58>)
 8002236:	f023 0304 	bic.w	r3, r3, #4
 800223a:	6213      	str	r3, [r2, #32]
 800223c:	e020      	b.n	8002280 <HAL_RCC_OscConfig+0x9ac>
 800223e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002242:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b05      	cmp	r3, #5
 800224c:	d10c      	bne.n	8002268 <HAL_RCC_OscConfig+0x994>
 800224e:	4bb7      	ldr	r3, [pc, #732]	; (800252c <HAL_RCC_OscConfig+0xc58>)
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	4ab6      	ldr	r2, [pc, #728]	; (800252c <HAL_RCC_OscConfig+0xc58>)
 8002254:	f043 0304 	orr.w	r3, r3, #4
 8002258:	6213      	str	r3, [r2, #32]
 800225a:	4bb4      	ldr	r3, [pc, #720]	; (800252c <HAL_RCC_OscConfig+0xc58>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	4ab3      	ldr	r2, [pc, #716]	; (800252c <HAL_RCC_OscConfig+0xc58>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6213      	str	r3, [r2, #32]
 8002266:	e00b      	b.n	8002280 <HAL_RCC_OscConfig+0x9ac>
 8002268:	4bb0      	ldr	r3, [pc, #704]	; (800252c <HAL_RCC_OscConfig+0xc58>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4aaf      	ldr	r2, [pc, #700]	; (800252c <HAL_RCC_OscConfig+0xc58>)
 800226e:	f023 0301 	bic.w	r3, r3, #1
 8002272:	6213      	str	r3, [r2, #32]
 8002274:	4bad      	ldr	r3, [pc, #692]	; (800252c <HAL_RCC_OscConfig+0xc58>)
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	4aac      	ldr	r2, [pc, #688]	; (800252c <HAL_RCC_OscConfig+0xc58>)
 800227a:	f023 0304 	bic.w	r3, r3, #4
 800227e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002284:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 8081 	beq.w	8002394 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002292:	f7fe faf3 	bl	800087c <HAL_GetTick>
 8002296:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229a:	e00b      	b.n	80022b4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800229c:	f7fe faee 	bl	800087c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e345      	b.n	8002940 <HAL_RCC_OscConfig+0x106c>
 80022b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80022bc:	2202      	movs	r2, #2
 80022be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	fa93 f2a3 	rbit	r2, r3
 80022ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80022e0:	2202      	movs	r2, #2
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	fa93 f2a3 	rbit	r2, r3
 80022f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80022fa:	601a      	str	r2, [r3, #0]
  return result;
 80022fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002300:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002304:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002306:	fab3 f383 	clz	r3, r3
 800230a:	b2db      	uxtb	r3, r3
 800230c:	095b      	lsrs	r3, r3, #5
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d102      	bne.n	8002320 <HAL_RCC_OscConfig+0xa4c>
 800231a:	4b84      	ldr	r3, [pc, #528]	; (800252c <HAL_RCC_OscConfig+0xc58>)
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	e013      	b.n	8002348 <HAL_RCC_OscConfig+0xa74>
 8002320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002324:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002328:	2202      	movs	r2, #2
 800232a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002330:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	fa93 f2a3 	rbit	r2, r3
 800233a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	4b79      	ldr	r3, [pc, #484]	; (800252c <HAL_RCC_OscConfig+0xc58>)
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800234c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002350:	2102      	movs	r1, #2
 8002352:	6011      	str	r1, [r2, #0]
 8002354:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002358:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800235c:	6812      	ldr	r2, [r2, #0]
 800235e:	fa92 f1a2 	rbit	r1, r2
 8002362:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002366:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800236a:	6011      	str	r1, [r2, #0]
  return result;
 800236c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002370:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002374:	6812      	ldr	r2, [r2, #0]
 8002376:	fab2 f282 	clz	r2, r2
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	f002 021f 	and.w	r2, r2, #31
 8002386:	2101      	movs	r1, #1
 8002388:	fa01 f202 	lsl.w	r2, r1, r2
 800238c:	4013      	ands	r3, r2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d084      	beq.n	800229c <HAL_RCC_OscConfig+0x9c8>
 8002392:	e07f      	b.n	8002494 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002394:	f7fe fa72 	bl	800087c <HAL_GetTick>
 8002398:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800239c:	e00b      	b.n	80023b6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800239e:	f7fe fa6d 	bl	800087c <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e2c4      	b.n	8002940 <HAL_RCC_OscConfig+0x106c>
 80023b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ba:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80023be:	2202      	movs	r2, #2
 80023c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	fa93 f2a3 	rbit	r2, r3
 80023d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023de:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80023e2:	2202      	movs	r2, #2
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	fa93 f2a3 	rbit	r2, r3
 80023f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80023fc:	601a      	str	r2, [r3, #0]
  return result;
 80023fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002402:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002406:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002408:	fab3 f383 	clz	r3, r3
 800240c:	b2db      	uxtb	r3, r3
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	b2db      	uxtb	r3, r3
 8002412:	f043 0302 	orr.w	r3, r3, #2
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d102      	bne.n	8002422 <HAL_RCC_OscConfig+0xb4e>
 800241c:	4b43      	ldr	r3, [pc, #268]	; (800252c <HAL_RCC_OscConfig+0xc58>)
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	e013      	b.n	800244a <HAL_RCC_OscConfig+0xb76>
 8002422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002426:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800242a:	2202      	movs	r2, #2
 800242c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002432:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	fa93 f2a3 	rbit	r2, r3
 800243c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002440:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	4b39      	ldr	r3, [pc, #228]	; (800252c <HAL_RCC_OscConfig+0xc58>)
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800244e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002452:	2102      	movs	r1, #2
 8002454:	6011      	str	r1, [r2, #0]
 8002456:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800245a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	fa92 f1a2 	rbit	r1, r2
 8002464:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002468:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800246c:	6011      	str	r1, [r2, #0]
  return result;
 800246e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002472:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	fab2 f282 	clz	r2, r2
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	f002 021f 	and.w	r2, r2, #31
 8002488:	2101      	movs	r1, #1
 800248a:	fa01 f202 	lsl.w	r2, r1, r2
 800248e:	4013      	ands	r3, r2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d184      	bne.n	800239e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002494:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002498:	2b01      	cmp	r3, #1
 800249a:	d105      	bne.n	80024a8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800249c:	4b23      	ldr	r3, [pc, #140]	; (800252c <HAL_RCC_OscConfig+0xc58>)
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	4a22      	ldr	r2, [pc, #136]	; (800252c <HAL_RCC_OscConfig+0xc58>)
 80024a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 8242 	beq.w	800293e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024ba:	4b1c      	ldr	r3, [pc, #112]	; (800252c <HAL_RCC_OscConfig+0xc58>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	f000 8213 	beq.w	80028ee <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	f040 8162 	bne.w	800279e <HAL_RCC_OscConfig+0xeca>
 80024da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024de:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80024e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ec:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	fa93 f2a3 	rbit	r2, r3
 80024f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80024fe:	601a      	str	r2, [r3, #0]
  return result;
 8002500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002504:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002508:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800250a:	fab3 f383 	clz	r3, r3
 800250e:	b2db      	uxtb	r3, r3
 8002510:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002514:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	461a      	mov	r2, r3
 800251c:	2300      	movs	r3, #0
 800251e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7fe f9ac 	bl	800087c <HAL_GetTick>
 8002524:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002528:	e00c      	b.n	8002544 <HAL_RCC_OscConfig+0xc70>
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002530:	f7fe f9a4 	bl	800087c <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e1fd      	b.n	8002940 <HAL_RCC_OscConfig+0x106c>
 8002544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002548:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800254c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002550:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002556:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	fa93 f2a3 	rbit	r2, r3
 8002560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002564:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002568:	601a      	str	r2, [r3, #0]
  return result;
 800256a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002572:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002574:	fab3 f383 	clz	r3, r3
 8002578:	b2db      	uxtb	r3, r3
 800257a:	095b      	lsrs	r3, r3, #5
 800257c:	b2db      	uxtb	r3, r3
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b01      	cmp	r3, #1
 8002586:	d102      	bne.n	800258e <HAL_RCC_OscConfig+0xcba>
 8002588:	4bb0      	ldr	r3, [pc, #704]	; (800284c <HAL_RCC_OscConfig+0xf78>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	e027      	b.n	80025de <HAL_RCC_OscConfig+0xd0a>
 800258e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002592:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002596:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800259a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	fa93 f2a3 	rbit	r2, r3
 80025aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ae:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80025bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	fa93 f2a3 	rbit	r2, r3
 80025d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	4b9c      	ldr	r3, [pc, #624]	; (800284c <HAL_RCC_OscConfig+0xf78>)
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025e2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80025e6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025ea:	6011      	str	r1, [r2, #0]
 80025ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025f0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	fa92 f1a2 	rbit	r1, r2
 80025fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025fe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002602:	6011      	str	r1, [r2, #0]
  return result;
 8002604:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002608:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	fab2 f282 	clz	r2, r2
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	f042 0220 	orr.w	r2, r2, #32
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	f002 021f 	and.w	r2, r2, #31
 800261e:	2101      	movs	r1, #1
 8002620:	fa01 f202 	lsl.w	r2, r1, r2
 8002624:	4013      	ands	r3, r2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d182      	bne.n	8002530 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800262a:	4b88      	ldr	r3, [pc, #544]	; (800284c <HAL_RCC_OscConfig+0xf78>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002636:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800263e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002642:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	430b      	orrs	r3, r1
 800264c:	497f      	ldr	r1, [pc, #508]	; (800284c <HAL_RCC_OscConfig+0xf78>)
 800264e:	4313      	orrs	r3, r2
 8002650:	604b      	str	r3, [r1, #4]
 8002652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002656:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800265a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800265e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002664:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	fa93 f2a3 	rbit	r2, r3
 800266e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002672:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002676:	601a      	str	r2, [r3, #0]
  return result;
 8002678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002680:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002682:	fab3 f383 	clz	r3, r3
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800268c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	461a      	mov	r2, r3
 8002694:	2301      	movs	r3, #1
 8002696:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7fe f8f0 	bl	800087c <HAL_GetTick>
 800269c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026a0:	e009      	b.n	80026b6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a2:	f7fe f8eb 	bl	800087c <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e144      	b.n	8002940 <HAL_RCC_OscConfig+0x106c>
 80026b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ba:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80026be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	fa93 f2a3 	rbit	r2, r3
 80026d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80026da:	601a      	str	r2, [r3, #0]
  return result;
 80026dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80026e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	095b      	lsrs	r3, r3, #5
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d102      	bne.n	8002700 <HAL_RCC_OscConfig+0xe2c>
 80026fa:	4b54      	ldr	r3, [pc, #336]	; (800284c <HAL_RCC_OscConfig+0xf78>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	e027      	b.n	8002750 <HAL_RCC_OscConfig+0xe7c>
 8002700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002704:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002708:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800270c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002712:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	fa93 f2a3 	rbit	r2, r3
 800271c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002720:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800272e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002738:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	fa93 f2a3 	rbit	r2, r3
 8002742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002746:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	4b3f      	ldr	r3, [pc, #252]	; (800284c <HAL_RCC_OscConfig+0xf78>)
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002754:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002758:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800275c:	6011      	str	r1, [r2, #0]
 800275e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002762:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	fa92 f1a2 	rbit	r1, r2
 800276c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002770:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002774:	6011      	str	r1, [r2, #0]
  return result;
 8002776:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800277a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	fab2 f282 	clz	r2, r2
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	f042 0220 	orr.w	r2, r2, #32
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	f002 021f 	and.w	r2, r2, #31
 8002790:	2101      	movs	r1, #1
 8002792:	fa01 f202 	lsl.w	r2, r1, r2
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d082      	beq.n	80026a2 <HAL_RCC_OscConfig+0xdce>
 800279c:	e0cf      	b.n	800293e <HAL_RCC_OscConfig+0x106a>
 800279e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80027a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	fa93 f2a3 	rbit	r2, r3
 80027ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027be:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80027c2:	601a      	str	r2, [r3, #0]
  return result;
 80027c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80027cc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ce:	fab3 f383 	clz	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	461a      	mov	r2, r3
 80027e0:	2300      	movs	r3, #0
 80027e2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7fe f84a 	bl	800087c <HAL_GetTick>
 80027e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ec:	e009      	b.n	8002802 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ee:	f7fe f845 	bl	800087c <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e09e      	b.n	8002940 <HAL_RCC_OscConfig+0x106c>
 8002802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002806:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800280a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800280e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002814:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	fa93 f2a3 	rbit	r2, r3
 800281e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002822:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002826:	601a      	str	r2, [r3, #0]
  return result;
 8002828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002830:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002832:	fab3 f383 	clz	r3, r3
 8002836:	b2db      	uxtb	r3, r3
 8002838:	095b      	lsrs	r3, r3, #5
 800283a:	b2db      	uxtb	r3, r3
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b01      	cmp	r3, #1
 8002844:	d104      	bne.n	8002850 <HAL_RCC_OscConfig+0xf7c>
 8002846:	4b01      	ldr	r3, [pc, #4]	; (800284c <HAL_RCC_OscConfig+0xf78>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	e029      	b.n	80028a0 <HAL_RCC_OscConfig+0xfcc>
 800284c:	40021000 	.word	0x40021000
 8002850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002854:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002858:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800285c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002862:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	fa93 f2a3 	rbit	r2, r3
 800286c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002870:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800287e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002888:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	fa93 f2a3 	rbit	r2, r3
 8002892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002896:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	4b2b      	ldr	r3, [pc, #172]	; (800294c <HAL_RCC_OscConfig+0x1078>)
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028a4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80028a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028ac:	6011      	str	r1, [r2, #0]
 80028ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028b2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	fa92 f1a2 	rbit	r1, r2
 80028bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028c0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80028c4:	6011      	str	r1, [r2, #0]
  return result;
 80028c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028ca:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	fab2 f282 	clz	r2, r2
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	f042 0220 	orr.w	r2, r2, #32
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	f002 021f 	and.w	r2, r2, #31
 80028e0:	2101      	movs	r1, #1
 80028e2:	fa01 f202 	lsl.w	r2, r1, r2
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d180      	bne.n	80027ee <HAL_RCC_OscConfig+0xf1a>
 80028ec:	e027      	b.n	800293e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e01e      	b.n	8002940 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002902:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_RCC_OscConfig+0x1078>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800290a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800290e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002916:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	429a      	cmp	r2, r3
 8002920:	d10b      	bne.n	800293a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002922:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002926:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800292a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002936:	429a      	cmp	r2, r3
 8002938:	d001      	beq.n	800293e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000

08002950 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b09e      	sub	sp, #120	; 0x78
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e162      	b.n	8002c2e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002968:	4b90      	ldr	r3, [pc, #576]	; (8002bac <HAL_RCC_ClockConfig+0x25c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d910      	bls.n	8002998 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002976:	4b8d      	ldr	r3, [pc, #564]	; (8002bac <HAL_RCC_ClockConfig+0x25c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 0207 	bic.w	r2, r3, #7
 800297e:	498b      	ldr	r1, [pc, #556]	; (8002bac <HAL_RCC_ClockConfig+0x25c>)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	4313      	orrs	r3, r2
 8002984:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002986:	4b89      	ldr	r3, [pc, #548]	; (8002bac <HAL_RCC_ClockConfig+0x25c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d001      	beq.n	8002998 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e14a      	b.n	8002c2e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a4:	4b82      	ldr	r3, [pc, #520]	; (8002bb0 <HAL_RCC_ClockConfig+0x260>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	497f      	ldr	r1, [pc, #508]	; (8002bb0 <HAL_RCC_ClockConfig+0x260>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 80dc 	beq.w	8002b7c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d13c      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xf6>
 80029cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029d0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80029da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029dc:	fab3 f383 	clz	r3, r3
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d102      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xa6>
 80029f0:	4b6f      	ldr	r3, [pc, #444]	; (8002bb0 <HAL_RCC_ClockConfig+0x260>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	e00f      	b.n	8002a16 <HAL_RCC_ClockConfig+0xc6>
 80029f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	667b      	str	r3, [r7, #100]	; 0x64
 8002a04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a08:	663b      	str	r3, [r7, #96]	; 0x60
 8002a0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a0c:	fa93 f3a3 	rbit	r3, r3
 8002a10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a12:	4b67      	ldr	r3, [pc, #412]	; (8002bb0 <HAL_RCC_ClockConfig+0x260>)
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a1a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a1e:	fa92 f2a2 	rbit	r2, r2
 8002a22:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002a24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a26:	fab2 f282 	clz	r2, r2
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	f042 0220 	orr.w	r2, r2, #32
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	f002 021f 	and.w	r2, r2, #31
 8002a36:	2101      	movs	r1, #1
 8002a38:	fa01 f202 	lsl.w	r2, r1, r2
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d17b      	bne.n	8002b3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e0f3      	b.n	8002c2e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d13c      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x178>
 8002a4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a52:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5e:	fab3 f383 	clz	r3, r3
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	095b      	lsrs	r3, r3, #5
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d102      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x128>
 8002a72:	4b4f      	ldr	r3, [pc, #316]	; (8002bb0 <HAL_RCC_ClockConfig+0x260>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	e00f      	b.n	8002a98 <HAL_RCC_ClockConfig+0x148>
 8002a78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a80:	fa93 f3a3 	rbit	r3, r3
 8002a84:	647b      	str	r3, [r7, #68]	; 0x44
 8002a86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a8a:	643b      	str	r3, [r7, #64]	; 0x40
 8002a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a94:	4b46      	ldr	r3, [pc, #280]	; (8002bb0 <HAL_RCC_ClockConfig+0x260>)
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a9c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aa0:	fa92 f2a2 	rbit	r2, r2
 8002aa4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002aa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aa8:	fab2 f282 	clz	r2, r2
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	f042 0220 	orr.w	r2, r2, #32
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	f002 021f 	and.w	r2, r2, #31
 8002ab8:	2101      	movs	r1, #1
 8002aba:	fa01 f202 	lsl.w	r2, r1, r2
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d13a      	bne.n	8002b3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0b2      	b.n	8002c2e <HAL_RCC_ClockConfig+0x2de>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ace:	fa93 f3a3 	rbit	r3, r3
 8002ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad6:	fab3 f383 	clz	r3, r3
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	095b      	lsrs	r3, r3, #5
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d102      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x1a0>
 8002aea:	4b31      	ldr	r3, [pc, #196]	; (8002bb0 <HAL_RCC_ClockConfig+0x260>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	e00d      	b.n	8002b0c <HAL_RCC_ClockConfig+0x1bc>
 8002af0:	2302      	movs	r3, #2
 8002af2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
 8002afc:	2302      	movs	r3, #2
 8002afe:	623b      	str	r3, [r7, #32]
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	fa93 f3a3 	rbit	r3, r3
 8002b06:	61fb      	str	r3, [r7, #28]
 8002b08:	4b29      	ldr	r3, [pc, #164]	; (8002bb0 <HAL_RCC_ClockConfig+0x260>)
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	61ba      	str	r2, [r7, #24]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	fa92 f2a2 	rbit	r2, r2
 8002b16:	617a      	str	r2, [r7, #20]
  return result;
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	fab2 f282 	clz	r2, r2
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	f042 0220 	orr.w	r2, r2, #32
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	f002 021f 	and.w	r2, r2, #31
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b30:	4013      	ands	r3, r2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e079      	b.n	8002c2e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b3a:	4b1d      	ldr	r3, [pc, #116]	; (8002bb0 <HAL_RCC_ClockConfig+0x260>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f023 0203 	bic.w	r2, r3, #3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	491a      	ldr	r1, [pc, #104]	; (8002bb0 <HAL_RCC_ClockConfig+0x260>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b4c:	f7fd fe96 	bl	800087c <HAL_GetTick>
 8002b50:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b52:	e00a      	b.n	8002b6a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b54:	f7fd fe92 	bl	800087c <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e061      	b.n	8002c2e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6a:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <HAL_RCC_ClockConfig+0x260>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 020c 	and.w	r2, r3, #12
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d1eb      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_RCC_ClockConfig+0x25c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d214      	bcs.n	8002bb4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <HAL_RCC_ClockConfig+0x25c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 0207 	bic.w	r2, r3, #7
 8002b92:	4906      	ldr	r1, [pc, #24]	; (8002bac <HAL_RCC_ClockConfig+0x25c>)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9a:	4b04      	ldr	r3, [pc, #16]	; (8002bac <HAL_RCC_ClockConfig+0x25c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d005      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e040      	b.n	8002c2e <HAL_RCC_ClockConfig+0x2de>
 8002bac:	40022000 	.word	0x40022000
 8002bb0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d008      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bc0:	4b1d      	ldr	r3, [pc, #116]	; (8002c38 <HAL_RCC_ClockConfig+0x2e8>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	491a      	ldr	r1, [pc, #104]	; (8002c38 <HAL_RCC_ClockConfig+0x2e8>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d009      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bde:	4b16      	ldr	r3, [pc, #88]	; (8002c38 <HAL_RCC_ClockConfig+0x2e8>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4912      	ldr	r1, [pc, #72]	; (8002c38 <HAL_RCC_ClockConfig+0x2e8>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002bf2:	f000 f829 	bl	8002c48 <HAL_RCC_GetSysClockFreq>
 8002bf6:	4601      	mov	r1, r0
 8002bf8:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <HAL_RCC_ClockConfig+0x2e8>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c00:	22f0      	movs	r2, #240	; 0xf0
 8002c02:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	fa92 f2a2 	rbit	r2, r2
 8002c0a:	60fa      	str	r2, [r7, #12]
  return result;
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	fab2 f282 	clz	r2, r2
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	40d3      	lsrs	r3, r2
 8002c16:	4a09      	ldr	r2, [pc, #36]	; (8002c3c <HAL_RCC_ClockConfig+0x2ec>)
 8002c18:	5cd3      	ldrb	r3, [r2, r3]
 8002c1a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c1e:	4a08      	ldr	r2, [pc, #32]	; (8002c40 <HAL_RCC_ClockConfig+0x2f0>)
 8002c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c22:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <HAL_RCC_ClockConfig+0x2f4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fd fde4 	bl	80007f4 <HAL_InitTick>
  
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3778      	adds	r7, #120	; 0x78
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	080041c8 	.word	0x080041c8
 8002c40:	20000000 	.word	0x20000000
 8002c44:	20000004 	.word	0x20000004

08002c48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b08b      	sub	sp, #44	; 0x2c
 8002c4c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61fb      	str	r3, [r7, #28]
 8002c52:	2300      	movs	r3, #0
 8002c54:	61bb      	str	r3, [r7, #24]
 8002c56:	2300      	movs	r3, #0
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002c62:	4b29      	ldr	r3, [pc, #164]	; (8002d08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d002      	beq.n	8002c78 <HAL_RCC_GetSysClockFreq+0x30>
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d003      	beq.n	8002c7e <HAL_RCC_GetSysClockFreq+0x36>
 8002c76:	e03c      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c78:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c7a:	623b      	str	r3, [r7, #32]
      break;
 8002c7c:	e03c      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c84:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002c88:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	fa92 f2a2 	rbit	r2, r2
 8002c90:	607a      	str	r2, [r7, #4]
  return result;
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	fab2 f282 	clz	r2, r2
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	40d3      	lsrs	r3, r2
 8002c9c:	4a1c      	ldr	r2, [pc, #112]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c9e:	5cd3      	ldrb	r3, [r2, r3]
 8002ca0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002ca2:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	220f      	movs	r2, #15
 8002cac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	fa92 f2a2 	rbit	r2, r2
 8002cb4:	60fa      	str	r2, [r7, #12]
  return result;
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	fab2 f282 	clz	r2, r2
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	40d3      	lsrs	r3, r2
 8002cc0:	4a14      	ldr	r2, [pc, #80]	; (8002d14 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002cc2:	5cd3      	ldrb	r3, [r2, r3]
 8002cc4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cd0:	4a0e      	ldr	r2, [pc, #56]	; (8002d0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	fb02 f303 	mul.w	r3, r2, r3
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce0:	e004      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	4a0c      	ldr	r2, [pc, #48]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ce6:	fb02 f303 	mul.w	r3, r2, r3
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	623b      	str	r3, [r7, #32]
      break;
 8002cf0:	e002      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cf2:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cf4:	623b      	str	r3, [r7, #32]
      break;
 8002cf6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	372c      	adds	r7, #44	; 0x2c
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	007a1200 	.word	0x007a1200
 8002d10:	080041e0 	.word	0x080041e0
 8002d14:	080041f0 	.word	0x080041f0
 8002d18:	003d0900 	.word	0x003d0900

08002d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d20:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d22:	681b      	ldr	r3, [r3, #0]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	20000000 	.word	0x20000000

08002d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002d3a:	f7ff ffef 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d3e:	4601      	mov	r1, r0
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d48:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002d4c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	fa92 f2a2 	rbit	r2, r2
 8002d54:	603a      	str	r2, [r7, #0]
  return result;
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	fab2 f282 	clz	r2, r2
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	40d3      	lsrs	r3, r2
 8002d60:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002d62:	5cd3      	ldrb	r3, [r2, r3]
 8002d64:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40021000 	.word	0x40021000
 8002d74:	080041d8 	.word	0x080041d8

08002d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002d7e:	f7ff ffcd 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d82:	4601      	mov	r1, r0
 8002d84:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002d8c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002d90:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	fa92 f2a2 	rbit	r2, r2
 8002d98:	603a      	str	r2, [r7, #0]
  return result;
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	fab2 f282 	clz	r2, r2
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	40d3      	lsrs	r3, r2
 8002da4:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002da6:	5cd3      	ldrb	r3, [r2, r3]
 8002da8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002dac:	4618      	mov	r0, r3
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40021000 	.word	0x40021000
 8002db8:	080041d8 	.word	0x080041d8

08002dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b092      	sub	sp, #72	; 0x48
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 80cd 	beq.w	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de0:	4b86      	ldr	r3, [pc, #536]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10e      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dec:	4b83      	ldr	r3, [pc, #524]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	4a82      	ldr	r2, [pc, #520]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df6:	61d3      	str	r3, [r2, #28]
 8002df8:	4b80      	ldr	r3, [pc, #512]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e04:	2301      	movs	r3, #1
 8002e06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0a:	4b7d      	ldr	r3, [pc, #500]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d118      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e16:	4b7a      	ldr	r3, [pc, #488]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a79      	ldr	r2, [pc, #484]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e20:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e22:	f7fd fd2b 	bl	800087c <HAL_GetTick>
 8002e26:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e28:	e008      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e2a:	f7fd fd27 	bl	800087c <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b64      	cmp	r3, #100	; 0x64
 8002e36:	d901      	bls.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e0db      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3c:	4b70      	ldr	r3, [pc, #448]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e48:	4b6c      	ldr	r3, [pc, #432]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e50:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d07d      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d076      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e66:	4b65      	ldr	r3, [pc, #404]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e74:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e78:	fa93 f3a3 	rbit	r3, r3
 8002e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e80:	fab3 f383 	clz	r3, r3
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	461a      	mov	r2, r3
 8002e88:	4b5e      	ldr	r3, [pc, #376]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e8a:	4413      	add	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	461a      	mov	r2, r3
 8002e90:	2301      	movs	r3, #1
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9c:	fa93 f3a3 	rbit	r3, r3
 8002ea0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ea4:	fab3 f383 	clz	r3, r3
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	4b55      	ldr	r3, [pc, #340]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002eb8:	4a50      	ldr	r2, [pc, #320]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ebc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d045      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7fd fcd8 	bl	800087c <HAL_GetTick>
 8002ecc:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ece:	e00a      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed0:	f7fd fcd4 	bl	800087c <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e086      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	623b      	str	r3, [r7, #32]
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	fa93 f3a3 	rbit	r3, r3
 8002efc:	61fb      	str	r3, [r7, #28]
  return result;
 8002efe:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f00:	fab3 f383 	clz	r3, r3
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	f043 0302 	orr.w	r3, r3, #2
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d102      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002f14:	4b39      	ldr	r3, [pc, #228]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	e007      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	fa93 f3a3 	rbit	r3, r3
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	4b35      	ldr	r3, [pc, #212]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	613a      	str	r2, [r7, #16]
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	fa92 f2a2 	rbit	r2, r2
 8002f34:	60fa      	str	r2, [r7, #12]
  return result;
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	fab2 f282 	clz	r2, r2
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	f002 021f 	and.w	r2, r2, #31
 8002f48:	2101      	movs	r1, #1
 8002f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0bd      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f54:	4b29      	ldr	r3, [pc, #164]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	4926      	ldr	r1, [pc, #152]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f66:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d105      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6e:	4b23      	ldr	r3, [pc, #140]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	4a22      	ldr	r2, [pc, #136]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f78:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d008      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f86:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	f023 0203 	bic.w	r2, r3, #3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	491a      	ldr	r1, [pc, #104]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fa4:	4b15      	ldr	r3, [pc, #84]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	f023 0210 	bic.w	r2, r3, #16
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4912      	ldr	r1, [pc, #72]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d008      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	490b      	ldr	r1, [pc, #44]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d008      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	4903      	ldr	r1, [pc, #12]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3748      	adds	r7, #72	; 0x48
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40021000 	.word	0x40021000
 8003000:	40007000 	.word	0x40007000
 8003004:	10908100 	.word	0x10908100

08003008 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e040      	b.n	800309c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800301e:	2b00      	cmp	r3, #0
 8003020:	d106      	bne.n	8003030 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7fd faee 	bl	800060c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2224      	movs	r2, #36	; 0x24
 8003034:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0201 	bic.w	r2, r2, #1
 8003044:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f8b6 	bl	80031b8 <UART_SetConfig>
 800304c:	4603      	mov	r3, r0
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e022      	b.n	800309c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f9e0 	bl	8003424 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003072:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003082:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 fa67 	bl	8003568 <UART_CheckIdleState>
 800309a:	4603      	mov	r3, r0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08a      	sub	sp, #40	; 0x28
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	4613      	mov	r3, r2
 80030b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030b8:	2b20      	cmp	r3, #32
 80030ba:	d178      	bne.n	80031ae <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <HAL_UART_Transmit+0x24>
 80030c2:	88fb      	ldrh	r3, [r7, #6]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e071      	b.n	80031b0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2221      	movs	r2, #33	; 0x21
 80030d8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030da:	f7fd fbcf 	bl	800087c <HAL_GetTick>
 80030de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	88fa      	ldrh	r2, [r7, #6]
 80030e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	88fa      	ldrh	r2, [r7, #6]
 80030ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f8:	d108      	bne.n	800310c <HAL_UART_Transmit+0x68>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d104      	bne.n	800310c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	61bb      	str	r3, [r7, #24]
 800310a:	e003      	b.n	8003114 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003110:	2300      	movs	r3, #0
 8003112:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003114:	e030      	b.n	8003178 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2200      	movs	r2, #0
 800311e:	2180      	movs	r1, #128	; 0x80
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 fac9 	bl	80036b8 <UART_WaitOnFlagUntilTimeout>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d004      	beq.n	8003136 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e03c      	b.n	80031b0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10b      	bne.n	8003154 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	881a      	ldrh	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003148:	b292      	uxth	r2, r2
 800314a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	3302      	adds	r3, #2
 8003150:	61bb      	str	r3, [r7, #24]
 8003152:	e008      	b.n	8003166 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	781a      	ldrb	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	b292      	uxth	r2, r2
 800315e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	3301      	adds	r3, #1
 8003164:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800317e:	b29b      	uxth	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1c8      	bne.n	8003116 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2200      	movs	r2, #0
 800318c:	2140      	movs	r1, #64	; 0x40
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 fa92 	bl	80036b8 <UART_WaitOnFlagUntilTimeout>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d004      	beq.n	80031a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2220      	movs	r2, #32
 800319e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e005      	b.n	80031b0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2220      	movs	r2, #32
 80031a8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	e000      	b.n	80031b0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80031ae:	2302      	movs	r3, #2
  }
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3720      	adds	r7, #32
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b088      	sub	sp, #32
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	4313      	orrs	r3, r2
 80031da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	4b8a      	ldr	r3, [pc, #552]	; (800340c <UART_SetConfig+0x254>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6812      	ldr	r2, [r2, #0]
 80031ea:	6979      	ldr	r1, [r7, #20]
 80031ec:	430b      	orrs	r3, r1
 80031ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	4313      	orrs	r3, r2
 8003214:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	430a      	orrs	r2, r1
 8003228:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a78      	ldr	r2, [pc, #480]	; (8003410 <UART_SetConfig+0x258>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d120      	bne.n	8003276 <UART_SetConfig+0xbe>
 8003234:	4b77      	ldr	r3, [pc, #476]	; (8003414 <UART_SetConfig+0x25c>)
 8003236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003238:	f003 0303 	and.w	r3, r3, #3
 800323c:	2b03      	cmp	r3, #3
 800323e:	d817      	bhi.n	8003270 <UART_SetConfig+0xb8>
 8003240:	a201      	add	r2, pc, #4	; (adr r2, 8003248 <UART_SetConfig+0x90>)
 8003242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003246:	bf00      	nop
 8003248:	08003259 	.word	0x08003259
 800324c:	08003265 	.word	0x08003265
 8003250:	0800326b 	.word	0x0800326b
 8003254:	0800325f 	.word	0x0800325f
 8003258:	2300      	movs	r3, #0
 800325a:	77fb      	strb	r3, [r7, #31]
 800325c:	e01d      	b.n	800329a <UART_SetConfig+0xe2>
 800325e:	2302      	movs	r3, #2
 8003260:	77fb      	strb	r3, [r7, #31]
 8003262:	e01a      	b.n	800329a <UART_SetConfig+0xe2>
 8003264:	2304      	movs	r3, #4
 8003266:	77fb      	strb	r3, [r7, #31]
 8003268:	e017      	b.n	800329a <UART_SetConfig+0xe2>
 800326a:	2308      	movs	r3, #8
 800326c:	77fb      	strb	r3, [r7, #31]
 800326e:	e014      	b.n	800329a <UART_SetConfig+0xe2>
 8003270:	2310      	movs	r3, #16
 8003272:	77fb      	strb	r3, [r7, #31]
 8003274:	e011      	b.n	800329a <UART_SetConfig+0xe2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a67      	ldr	r2, [pc, #412]	; (8003418 <UART_SetConfig+0x260>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d102      	bne.n	8003286 <UART_SetConfig+0xce>
 8003280:	2300      	movs	r3, #0
 8003282:	77fb      	strb	r3, [r7, #31]
 8003284:	e009      	b.n	800329a <UART_SetConfig+0xe2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a64      	ldr	r2, [pc, #400]	; (800341c <UART_SetConfig+0x264>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d102      	bne.n	8003296 <UART_SetConfig+0xde>
 8003290:	2300      	movs	r3, #0
 8003292:	77fb      	strb	r3, [r7, #31]
 8003294:	e001      	b.n	800329a <UART_SetConfig+0xe2>
 8003296:	2310      	movs	r3, #16
 8003298:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032a2:	d15a      	bne.n	800335a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80032a4:	7ffb      	ldrb	r3, [r7, #31]
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d827      	bhi.n	80032fa <UART_SetConfig+0x142>
 80032aa:	a201      	add	r2, pc, #4	; (adr r2, 80032b0 <UART_SetConfig+0xf8>)
 80032ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b0:	080032d5 	.word	0x080032d5
 80032b4:	080032dd 	.word	0x080032dd
 80032b8:	080032e5 	.word	0x080032e5
 80032bc:	080032fb 	.word	0x080032fb
 80032c0:	080032eb 	.word	0x080032eb
 80032c4:	080032fb 	.word	0x080032fb
 80032c8:	080032fb 	.word	0x080032fb
 80032cc:	080032fb 	.word	0x080032fb
 80032d0:	080032f3 	.word	0x080032f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032d4:	f7ff fd2e 	bl	8002d34 <HAL_RCC_GetPCLK1Freq>
 80032d8:	61b8      	str	r0, [r7, #24]
        break;
 80032da:	e013      	b.n	8003304 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032dc:	f7ff fd4c 	bl	8002d78 <HAL_RCC_GetPCLK2Freq>
 80032e0:	61b8      	str	r0, [r7, #24]
        break;
 80032e2:	e00f      	b.n	8003304 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032e4:	4b4e      	ldr	r3, [pc, #312]	; (8003420 <UART_SetConfig+0x268>)
 80032e6:	61bb      	str	r3, [r7, #24]
        break;
 80032e8:	e00c      	b.n	8003304 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ea:	f7ff fcad 	bl	8002c48 <HAL_RCC_GetSysClockFreq>
 80032ee:	61b8      	str	r0, [r7, #24]
        break;
 80032f0:	e008      	b.n	8003304 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032f6:	61bb      	str	r3, [r7, #24]
        break;
 80032f8:	e004      	b.n	8003304 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	77bb      	strb	r3, [r7, #30]
        break;
 8003302:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d074      	beq.n	80033f4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	005a      	lsls	r2, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	085b      	lsrs	r3, r3, #1
 8003314:	441a      	add	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	fbb2 f3f3 	udiv	r3, r2, r3
 800331e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	2b0f      	cmp	r3, #15
 8003324:	d916      	bls.n	8003354 <UART_SetConfig+0x19c>
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332c:	d212      	bcs.n	8003354 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	b29b      	uxth	r3, r3
 8003332:	f023 030f 	bic.w	r3, r3, #15
 8003336:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	085b      	lsrs	r3, r3, #1
 800333c:	b29b      	uxth	r3, r3
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	b29a      	uxth	r2, r3
 8003344:	89fb      	ldrh	r3, [r7, #14]
 8003346:	4313      	orrs	r3, r2
 8003348:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	89fa      	ldrh	r2, [r7, #14]
 8003350:	60da      	str	r2, [r3, #12]
 8003352:	e04f      	b.n	80033f4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	77bb      	strb	r3, [r7, #30]
 8003358:	e04c      	b.n	80033f4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800335a:	7ffb      	ldrb	r3, [r7, #31]
 800335c:	2b08      	cmp	r3, #8
 800335e:	d828      	bhi.n	80033b2 <UART_SetConfig+0x1fa>
 8003360:	a201      	add	r2, pc, #4	; (adr r2, 8003368 <UART_SetConfig+0x1b0>)
 8003362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003366:	bf00      	nop
 8003368:	0800338d 	.word	0x0800338d
 800336c:	08003395 	.word	0x08003395
 8003370:	0800339d 	.word	0x0800339d
 8003374:	080033b3 	.word	0x080033b3
 8003378:	080033a3 	.word	0x080033a3
 800337c:	080033b3 	.word	0x080033b3
 8003380:	080033b3 	.word	0x080033b3
 8003384:	080033b3 	.word	0x080033b3
 8003388:	080033ab 	.word	0x080033ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800338c:	f7ff fcd2 	bl	8002d34 <HAL_RCC_GetPCLK1Freq>
 8003390:	61b8      	str	r0, [r7, #24]
        break;
 8003392:	e013      	b.n	80033bc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003394:	f7ff fcf0 	bl	8002d78 <HAL_RCC_GetPCLK2Freq>
 8003398:	61b8      	str	r0, [r7, #24]
        break;
 800339a:	e00f      	b.n	80033bc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800339c:	4b20      	ldr	r3, [pc, #128]	; (8003420 <UART_SetConfig+0x268>)
 800339e:	61bb      	str	r3, [r7, #24]
        break;
 80033a0:	e00c      	b.n	80033bc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033a2:	f7ff fc51 	bl	8002c48 <HAL_RCC_GetSysClockFreq>
 80033a6:	61b8      	str	r0, [r7, #24]
        break;
 80033a8:	e008      	b.n	80033bc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ae:	61bb      	str	r3, [r7, #24]
        break;
 80033b0:	e004      	b.n	80033bc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	77bb      	strb	r3, [r7, #30]
        break;
 80033ba:	bf00      	nop
    }

    if (pclk != 0U)
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d018      	beq.n	80033f4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	085a      	lsrs	r2, r3, #1
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	441a      	add	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	2b0f      	cmp	r3, #15
 80033da:	d909      	bls.n	80033f0 <UART_SetConfig+0x238>
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e2:	d205      	bcs.n	80033f0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	60da      	str	r2, [r3, #12]
 80033ee:	e001      	b.n	80033f4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003400:	7fbb      	ldrb	r3, [r7, #30]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3720      	adds	r7, #32
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	efff69f3 	.word	0xefff69f3
 8003410:	40013800 	.word	0x40013800
 8003414:	40021000 	.word	0x40021000
 8003418:	40004400 	.word	0x40004400
 800341c:	40004800 	.word	0x40004800
 8003420:	007a1200 	.word	0x007a1200

08003424 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003500:	2b00      	cmp	r3, #0
 8003502:	d01a      	beq.n	800353a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003522:	d10a      	bne.n	800353a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	605a      	str	r2, [r3, #4]
  }
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b098      	sub	sp, #96	; 0x60
 800356c:	af02      	add	r7, sp, #8
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003578:	f7fd f980 	bl	800087c <HAL_GetTick>
 800357c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b08      	cmp	r3, #8
 800358a:	d12e      	bne.n	80035ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800358c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003594:	2200      	movs	r2, #0
 8003596:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f88c 	bl	80036b8 <UART_WaitOnFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d021      	beq.n	80035ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ae:	e853 3f00 	ldrex	r3, [r3]
 80035b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035ba:	653b      	str	r3, [r7, #80]	; 0x50
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	461a      	mov	r2, r3
 80035c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035c4:	647b      	str	r3, [r7, #68]	; 0x44
 80035c6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035cc:	e841 2300 	strex	r3, r2, [r1]
 80035d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1e6      	bne.n	80035a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2220      	movs	r2, #32
 80035dc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e062      	b.n	80036b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d149      	bne.n	800368c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003600:	2200      	movs	r2, #0
 8003602:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f856 	bl	80036b8 <UART_WaitOnFlagUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d03c      	beq.n	800368c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	e853 3f00 	ldrex	r3, [r3]
 800361e:	623b      	str	r3, [r7, #32]
   return(result);
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003626:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	461a      	mov	r2, r3
 800362e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003630:	633b      	str	r3, [r7, #48]	; 0x30
 8003632:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003634:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003638:	e841 2300 	strex	r3, r2, [r1]
 800363c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800363e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1e6      	bne.n	8003612 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3308      	adds	r3, #8
 800364a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	e853 3f00 	ldrex	r3, [r3]
 8003652:	60fb      	str	r3, [r7, #12]
   return(result);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f023 0301 	bic.w	r3, r3, #1
 800365a:	64bb      	str	r3, [r7, #72]	; 0x48
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3308      	adds	r3, #8
 8003662:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003664:	61fa      	str	r2, [r7, #28]
 8003666:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003668:	69b9      	ldr	r1, [r7, #24]
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	e841 2300 	strex	r3, r2, [r1]
 8003670:	617b      	str	r3, [r7, #20]
   return(result);
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1e5      	bne.n	8003644 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2220      	movs	r2, #32
 800367c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e011      	b.n	80036b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2220      	movs	r2, #32
 8003690:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2220      	movs	r2, #32
 8003696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3758      	adds	r7, #88	; 0x58
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	603b      	str	r3, [r7, #0]
 80036c4:	4613      	mov	r3, r2
 80036c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036c8:	e049      	b.n	800375e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d0:	d045      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d2:	f7fd f8d3 	bl	800087c <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d302      	bcc.n	80036e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e048      	b.n	800377e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d031      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b08      	cmp	r3, #8
 8003706:	d110      	bne.n	800372a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2208      	movs	r2, #8
 800370e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 f838 	bl	8003786 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2208      	movs	r2, #8
 800371a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e029      	b.n	800377e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003738:	d111      	bne.n	800375e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003742:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 f81e 	bl	8003786 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2220      	movs	r2, #32
 800374e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e00f      	b.n	800377e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69da      	ldr	r2, [r3, #28]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4013      	ands	r3, r2
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	429a      	cmp	r2, r3
 800376c:	bf0c      	ite	eq
 800376e:	2301      	moveq	r3, #1
 8003770:	2300      	movne	r3, #0
 8003772:	b2db      	uxtb	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	429a      	cmp	r2, r3
 800377a:	d0a6      	beq.n	80036ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003786:	b480      	push	{r7}
 8003788:	b095      	sub	sp, #84	; 0x54
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003796:	e853 3f00 	ldrex	r3, [r3]
 800379a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800379c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	461a      	mov	r2, r3
 80037aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ac:	643b      	str	r3, [r7, #64]	; 0x40
 80037ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037b4:	e841 2300 	strex	r3, r2, [r1]
 80037b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1e6      	bne.n	800378e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3308      	adds	r3, #8
 80037c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	e853 3f00 	ldrex	r3, [r3]
 80037ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f023 0301 	bic.w	r3, r3, #1
 80037d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3308      	adds	r3, #8
 80037de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e8:	e841 2300 	strex	r3, r2, [r1]
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e5      	bne.n	80037c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d118      	bne.n	800382e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	e853 3f00 	ldrex	r3, [r3]
 8003808:	60bb      	str	r3, [r7, #8]
   return(result);
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f023 0310 	bic.w	r3, r3, #16
 8003810:	647b      	str	r3, [r7, #68]	; 0x44
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800381a:	61bb      	str	r3, [r7, #24]
 800381c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381e:	6979      	ldr	r1, [r7, #20]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	e841 2300 	strex	r3, r2, [r1]
 8003826:	613b      	str	r3, [r7, #16]
   return(result);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1e6      	bne.n	80037fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003842:	bf00      	nop
 8003844:	3754      	adds	r7, #84	; 0x54
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <__errno>:
 8003850:	4b01      	ldr	r3, [pc, #4]	; (8003858 <__errno+0x8>)
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	2000000c 	.word	0x2000000c

0800385c <__libc_init_array>:
 800385c:	b570      	push	{r4, r5, r6, lr}
 800385e:	4d0d      	ldr	r5, [pc, #52]	; (8003894 <__libc_init_array+0x38>)
 8003860:	4c0d      	ldr	r4, [pc, #52]	; (8003898 <__libc_init_array+0x3c>)
 8003862:	1b64      	subs	r4, r4, r5
 8003864:	10a4      	asrs	r4, r4, #2
 8003866:	2600      	movs	r6, #0
 8003868:	42a6      	cmp	r6, r4
 800386a:	d109      	bne.n	8003880 <__libc_init_array+0x24>
 800386c:	4d0b      	ldr	r5, [pc, #44]	; (800389c <__libc_init_array+0x40>)
 800386e:	4c0c      	ldr	r4, [pc, #48]	; (80038a0 <__libc_init_array+0x44>)
 8003870:	f000 fc8e 	bl	8004190 <_init>
 8003874:	1b64      	subs	r4, r4, r5
 8003876:	10a4      	asrs	r4, r4, #2
 8003878:	2600      	movs	r6, #0
 800387a:	42a6      	cmp	r6, r4
 800387c:	d105      	bne.n	800388a <__libc_init_array+0x2e>
 800387e:	bd70      	pop	{r4, r5, r6, pc}
 8003880:	f855 3b04 	ldr.w	r3, [r5], #4
 8003884:	4798      	blx	r3
 8003886:	3601      	adds	r6, #1
 8003888:	e7ee      	b.n	8003868 <__libc_init_array+0xc>
 800388a:	f855 3b04 	ldr.w	r3, [r5], #4
 800388e:	4798      	blx	r3
 8003890:	3601      	adds	r6, #1
 8003892:	e7f2      	b.n	800387a <__libc_init_array+0x1e>
 8003894:	08004234 	.word	0x08004234
 8003898:	08004234 	.word	0x08004234
 800389c:	08004234 	.word	0x08004234
 80038a0:	08004238 	.word	0x08004238

080038a4 <memset>:
 80038a4:	4402      	add	r2, r0
 80038a6:	4603      	mov	r3, r0
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d100      	bne.n	80038ae <memset+0xa>
 80038ac:	4770      	bx	lr
 80038ae:	f803 1b01 	strb.w	r1, [r3], #1
 80038b2:	e7f9      	b.n	80038a8 <memset+0x4>

080038b4 <siprintf>:
 80038b4:	b40e      	push	{r1, r2, r3}
 80038b6:	b500      	push	{lr}
 80038b8:	b09c      	sub	sp, #112	; 0x70
 80038ba:	ab1d      	add	r3, sp, #116	; 0x74
 80038bc:	9002      	str	r0, [sp, #8]
 80038be:	9006      	str	r0, [sp, #24]
 80038c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038c4:	4809      	ldr	r0, [pc, #36]	; (80038ec <siprintf+0x38>)
 80038c6:	9107      	str	r1, [sp, #28]
 80038c8:	9104      	str	r1, [sp, #16]
 80038ca:	4909      	ldr	r1, [pc, #36]	; (80038f0 <siprintf+0x3c>)
 80038cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80038d0:	9105      	str	r1, [sp, #20]
 80038d2:	6800      	ldr	r0, [r0, #0]
 80038d4:	9301      	str	r3, [sp, #4]
 80038d6:	a902      	add	r1, sp, #8
 80038d8:	f000 f868 	bl	80039ac <_svfiprintf_r>
 80038dc:	9b02      	ldr	r3, [sp, #8]
 80038de:	2200      	movs	r2, #0
 80038e0:	701a      	strb	r2, [r3, #0]
 80038e2:	b01c      	add	sp, #112	; 0x70
 80038e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80038e8:	b003      	add	sp, #12
 80038ea:	4770      	bx	lr
 80038ec:	2000000c 	.word	0x2000000c
 80038f0:	ffff0208 	.word	0xffff0208

080038f4 <__ssputs_r>:
 80038f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038f8:	688e      	ldr	r6, [r1, #8]
 80038fa:	429e      	cmp	r6, r3
 80038fc:	4682      	mov	sl, r0
 80038fe:	460c      	mov	r4, r1
 8003900:	4690      	mov	r8, r2
 8003902:	461f      	mov	r7, r3
 8003904:	d838      	bhi.n	8003978 <__ssputs_r+0x84>
 8003906:	898a      	ldrh	r2, [r1, #12]
 8003908:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800390c:	d032      	beq.n	8003974 <__ssputs_r+0x80>
 800390e:	6825      	ldr	r5, [r4, #0]
 8003910:	6909      	ldr	r1, [r1, #16]
 8003912:	eba5 0901 	sub.w	r9, r5, r1
 8003916:	6965      	ldr	r5, [r4, #20]
 8003918:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800391c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003920:	3301      	adds	r3, #1
 8003922:	444b      	add	r3, r9
 8003924:	106d      	asrs	r5, r5, #1
 8003926:	429d      	cmp	r5, r3
 8003928:	bf38      	it	cc
 800392a:	461d      	movcc	r5, r3
 800392c:	0553      	lsls	r3, r2, #21
 800392e:	d531      	bpl.n	8003994 <__ssputs_r+0xa0>
 8003930:	4629      	mov	r1, r5
 8003932:	f000 fb63 	bl	8003ffc <_malloc_r>
 8003936:	4606      	mov	r6, r0
 8003938:	b950      	cbnz	r0, 8003950 <__ssputs_r+0x5c>
 800393a:	230c      	movs	r3, #12
 800393c:	f8ca 3000 	str.w	r3, [sl]
 8003940:	89a3      	ldrh	r3, [r4, #12]
 8003942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003946:	81a3      	strh	r3, [r4, #12]
 8003948:	f04f 30ff 	mov.w	r0, #4294967295
 800394c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003950:	6921      	ldr	r1, [r4, #16]
 8003952:	464a      	mov	r2, r9
 8003954:	f000 fabe 	bl	8003ed4 <memcpy>
 8003958:	89a3      	ldrh	r3, [r4, #12]
 800395a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800395e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003962:	81a3      	strh	r3, [r4, #12]
 8003964:	6126      	str	r6, [r4, #16]
 8003966:	6165      	str	r5, [r4, #20]
 8003968:	444e      	add	r6, r9
 800396a:	eba5 0509 	sub.w	r5, r5, r9
 800396e:	6026      	str	r6, [r4, #0]
 8003970:	60a5      	str	r5, [r4, #8]
 8003972:	463e      	mov	r6, r7
 8003974:	42be      	cmp	r6, r7
 8003976:	d900      	bls.n	800397a <__ssputs_r+0x86>
 8003978:	463e      	mov	r6, r7
 800397a:	6820      	ldr	r0, [r4, #0]
 800397c:	4632      	mov	r2, r6
 800397e:	4641      	mov	r1, r8
 8003980:	f000 fab6 	bl	8003ef0 <memmove>
 8003984:	68a3      	ldr	r3, [r4, #8]
 8003986:	1b9b      	subs	r3, r3, r6
 8003988:	60a3      	str	r3, [r4, #8]
 800398a:	6823      	ldr	r3, [r4, #0]
 800398c:	4433      	add	r3, r6
 800398e:	6023      	str	r3, [r4, #0]
 8003990:	2000      	movs	r0, #0
 8003992:	e7db      	b.n	800394c <__ssputs_r+0x58>
 8003994:	462a      	mov	r2, r5
 8003996:	f000 fba5 	bl	80040e4 <_realloc_r>
 800399a:	4606      	mov	r6, r0
 800399c:	2800      	cmp	r0, #0
 800399e:	d1e1      	bne.n	8003964 <__ssputs_r+0x70>
 80039a0:	6921      	ldr	r1, [r4, #16]
 80039a2:	4650      	mov	r0, sl
 80039a4:	f000 fabe 	bl	8003f24 <_free_r>
 80039a8:	e7c7      	b.n	800393a <__ssputs_r+0x46>
	...

080039ac <_svfiprintf_r>:
 80039ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039b0:	4698      	mov	r8, r3
 80039b2:	898b      	ldrh	r3, [r1, #12]
 80039b4:	061b      	lsls	r3, r3, #24
 80039b6:	b09d      	sub	sp, #116	; 0x74
 80039b8:	4607      	mov	r7, r0
 80039ba:	460d      	mov	r5, r1
 80039bc:	4614      	mov	r4, r2
 80039be:	d50e      	bpl.n	80039de <_svfiprintf_r+0x32>
 80039c0:	690b      	ldr	r3, [r1, #16]
 80039c2:	b963      	cbnz	r3, 80039de <_svfiprintf_r+0x32>
 80039c4:	2140      	movs	r1, #64	; 0x40
 80039c6:	f000 fb19 	bl	8003ffc <_malloc_r>
 80039ca:	6028      	str	r0, [r5, #0]
 80039cc:	6128      	str	r0, [r5, #16]
 80039ce:	b920      	cbnz	r0, 80039da <_svfiprintf_r+0x2e>
 80039d0:	230c      	movs	r3, #12
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	f04f 30ff 	mov.w	r0, #4294967295
 80039d8:	e0d1      	b.n	8003b7e <_svfiprintf_r+0x1d2>
 80039da:	2340      	movs	r3, #64	; 0x40
 80039dc:	616b      	str	r3, [r5, #20]
 80039de:	2300      	movs	r3, #0
 80039e0:	9309      	str	r3, [sp, #36]	; 0x24
 80039e2:	2320      	movs	r3, #32
 80039e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80039ec:	2330      	movs	r3, #48	; 0x30
 80039ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003b98 <_svfiprintf_r+0x1ec>
 80039f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039f6:	f04f 0901 	mov.w	r9, #1
 80039fa:	4623      	mov	r3, r4
 80039fc:	469a      	mov	sl, r3
 80039fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a02:	b10a      	cbz	r2, 8003a08 <_svfiprintf_r+0x5c>
 8003a04:	2a25      	cmp	r2, #37	; 0x25
 8003a06:	d1f9      	bne.n	80039fc <_svfiprintf_r+0x50>
 8003a08:	ebba 0b04 	subs.w	fp, sl, r4
 8003a0c:	d00b      	beq.n	8003a26 <_svfiprintf_r+0x7a>
 8003a0e:	465b      	mov	r3, fp
 8003a10:	4622      	mov	r2, r4
 8003a12:	4629      	mov	r1, r5
 8003a14:	4638      	mov	r0, r7
 8003a16:	f7ff ff6d 	bl	80038f4 <__ssputs_r>
 8003a1a:	3001      	adds	r0, #1
 8003a1c:	f000 80aa 	beq.w	8003b74 <_svfiprintf_r+0x1c8>
 8003a20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a22:	445a      	add	r2, fp
 8003a24:	9209      	str	r2, [sp, #36]	; 0x24
 8003a26:	f89a 3000 	ldrb.w	r3, [sl]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 80a2 	beq.w	8003b74 <_svfiprintf_r+0x1c8>
 8003a30:	2300      	movs	r3, #0
 8003a32:	f04f 32ff 	mov.w	r2, #4294967295
 8003a36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a3a:	f10a 0a01 	add.w	sl, sl, #1
 8003a3e:	9304      	str	r3, [sp, #16]
 8003a40:	9307      	str	r3, [sp, #28]
 8003a42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a46:	931a      	str	r3, [sp, #104]	; 0x68
 8003a48:	4654      	mov	r4, sl
 8003a4a:	2205      	movs	r2, #5
 8003a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a50:	4851      	ldr	r0, [pc, #324]	; (8003b98 <_svfiprintf_r+0x1ec>)
 8003a52:	f7fc fbc5 	bl	80001e0 <memchr>
 8003a56:	9a04      	ldr	r2, [sp, #16]
 8003a58:	b9d8      	cbnz	r0, 8003a92 <_svfiprintf_r+0xe6>
 8003a5a:	06d0      	lsls	r0, r2, #27
 8003a5c:	bf44      	itt	mi
 8003a5e:	2320      	movmi	r3, #32
 8003a60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a64:	0711      	lsls	r1, r2, #28
 8003a66:	bf44      	itt	mi
 8003a68:	232b      	movmi	r3, #43	; 0x2b
 8003a6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a6e:	f89a 3000 	ldrb.w	r3, [sl]
 8003a72:	2b2a      	cmp	r3, #42	; 0x2a
 8003a74:	d015      	beq.n	8003aa2 <_svfiprintf_r+0xf6>
 8003a76:	9a07      	ldr	r2, [sp, #28]
 8003a78:	4654      	mov	r4, sl
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	f04f 0c0a 	mov.w	ip, #10
 8003a80:	4621      	mov	r1, r4
 8003a82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a86:	3b30      	subs	r3, #48	; 0x30
 8003a88:	2b09      	cmp	r3, #9
 8003a8a:	d94e      	bls.n	8003b2a <_svfiprintf_r+0x17e>
 8003a8c:	b1b0      	cbz	r0, 8003abc <_svfiprintf_r+0x110>
 8003a8e:	9207      	str	r2, [sp, #28]
 8003a90:	e014      	b.n	8003abc <_svfiprintf_r+0x110>
 8003a92:	eba0 0308 	sub.w	r3, r0, r8
 8003a96:	fa09 f303 	lsl.w	r3, r9, r3
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	9304      	str	r3, [sp, #16]
 8003a9e:	46a2      	mov	sl, r4
 8003aa0:	e7d2      	b.n	8003a48 <_svfiprintf_r+0x9c>
 8003aa2:	9b03      	ldr	r3, [sp, #12]
 8003aa4:	1d19      	adds	r1, r3, #4
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	9103      	str	r1, [sp, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	bfbb      	ittet	lt
 8003aae:	425b      	neglt	r3, r3
 8003ab0:	f042 0202 	orrlt.w	r2, r2, #2
 8003ab4:	9307      	strge	r3, [sp, #28]
 8003ab6:	9307      	strlt	r3, [sp, #28]
 8003ab8:	bfb8      	it	lt
 8003aba:	9204      	strlt	r2, [sp, #16]
 8003abc:	7823      	ldrb	r3, [r4, #0]
 8003abe:	2b2e      	cmp	r3, #46	; 0x2e
 8003ac0:	d10c      	bne.n	8003adc <_svfiprintf_r+0x130>
 8003ac2:	7863      	ldrb	r3, [r4, #1]
 8003ac4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ac6:	d135      	bne.n	8003b34 <_svfiprintf_r+0x188>
 8003ac8:	9b03      	ldr	r3, [sp, #12]
 8003aca:	1d1a      	adds	r2, r3, #4
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	9203      	str	r2, [sp, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bfb8      	it	lt
 8003ad4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ad8:	3402      	adds	r4, #2
 8003ada:	9305      	str	r3, [sp, #20]
 8003adc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ba8 <_svfiprintf_r+0x1fc>
 8003ae0:	7821      	ldrb	r1, [r4, #0]
 8003ae2:	2203      	movs	r2, #3
 8003ae4:	4650      	mov	r0, sl
 8003ae6:	f7fc fb7b 	bl	80001e0 <memchr>
 8003aea:	b140      	cbz	r0, 8003afe <_svfiprintf_r+0x152>
 8003aec:	2340      	movs	r3, #64	; 0x40
 8003aee:	eba0 000a 	sub.w	r0, r0, sl
 8003af2:	fa03 f000 	lsl.w	r0, r3, r0
 8003af6:	9b04      	ldr	r3, [sp, #16]
 8003af8:	4303      	orrs	r3, r0
 8003afa:	3401      	adds	r4, #1
 8003afc:	9304      	str	r3, [sp, #16]
 8003afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b02:	4826      	ldr	r0, [pc, #152]	; (8003b9c <_svfiprintf_r+0x1f0>)
 8003b04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b08:	2206      	movs	r2, #6
 8003b0a:	f7fc fb69 	bl	80001e0 <memchr>
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	d038      	beq.n	8003b84 <_svfiprintf_r+0x1d8>
 8003b12:	4b23      	ldr	r3, [pc, #140]	; (8003ba0 <_svfiprintf_r+0x1f4>)
 8003b14:	bb1b      	cbnz	r3, 8003b5e <_svfiprintf_r+0x1b2>
 8003b16:	9b03      	ldr	r3, [sp, #12]
 8003b18:	3307      	adds	r3, #7
 8003b1a:	f023 0307 	bic.w	r3, r3, #7
 8003b1e:	3308      	adds	r3, #8
 8003b20:	9303      	str	r3, [sp, #12]
 8003b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b24:	4433      	add	r3, r6
 8003b26:	9309      	str	r3, [sp, #36]	; 0x24
 8003b28:	e767      	b.n	80039fa <_svfiprintf_r+0x4e>
 8003b2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b2e:	460c      	mov	r4, r1
 8003b30:	2001      	movs	r0, #1
 8003b32:	e7a5      	b.n	8003a80 <_svfiprintf_r+0xd4>
 8003b34:	2300      	movs	r3, #0
 8003b36:	3401      	adds	r4, #1
 8003b38:	9305      	str	r3, [sp, #20]
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	f04f 0c0a 	mov.w	ip, #10
 8003b40:	4620      	mov	r0, r4
 8003b42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b46:	3a30      	subs	r2, #48	; 0x30
 8003b48:	2a09      	cmp	r2, #9
 8003b4a:	d903      	bls.n	8003b54 <_svfiprintf_r+0x1a8>
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0c5      	beq.n	8003adc <_svfiprintf_r+0x130>
 8003b50:	9105      	str	r1, [sp, #20]
 8003b52:	e7c3      	b.n	8003adc <_svfiprintf_r+0x130>
 8003b54:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b58:	4604      	mov	r4, r0
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e7f0      	b.n	8003b40 <_svfiprintf_r+0x194>
 8003b5e:	ab03      	add	r3, sp, #12
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	462a      	mov	r2, r5
 8003b64:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <_svfiprintf_r+0x1f8>)
 8003b66:	a904      	add	r1, sp, #16
 8003b68:	4638      	mov	r0, r7
 8003b6a:	f3af 8000 	nop.w
 8003b6e:	1c42      	adds	r2, r0, #1
 8003b70:	4606      	mov	r6, r0
 8003b72:	d1d6      	bne.n	8003b22 <_svfiprintf_r+0x176>
 8003b74:	89ab      	ldrh	r3, [r5, #12]
 8003b76:	065b      	lsls	r3, r3, #25
 8003b78:	f53f af2c 	bmi.w	80039d4 <_svfiprintf_r+0x28>
 8003b7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b7e:	b01d      	add	sp, #116	; 0x74
 8003b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b84:	ab03      	add	r3, sp, #12
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	462a      	mov	r2, r5
 8003b8a:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <_svfiprintf_r+0x1f8>)
 8003b8c:	a904      	add	r1, sp, #16
 8003b8e:	4638      	mov	r0, r7
 8003b90:	f000 f87a 	bl	8003c88 <_printf_i>
 8003b94:	e7eb      	b.n	8003b6e <_svfiprintf_r+0x1c2>
 8003b96:	bf00      	nop
 8003b98:	08004200 	.word	0x08004200
 8003b9c:	0800420a 	.word	0x0800420a
 8003ba0:	00000000 	.word	0x00000000
 8003ba4:	080038f5 	.word	0x080038f5
 8003ba8:	08004206 	.word	0x08004206

08003bac <_printf_common>:
 8003bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bb0:	4616      	mov	r6, r2
 8003bb2:	4699      	mov	r9, r3
 8003bb4:	688a      	ldr	r2, [r1, #8]
 8003bb6:	690b      	ldr	r3, [r1, #16]
 8003bb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	bfb8      	it	lt
 8003bc0:	4613      	movlt	r3, r2
 8003bc2:	6033      	str	r3, [r6, #0]
 8003bc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bc8:	4607      	mov	r7, r0
 8003bca:	460c      	mov	r4, r1
 8003bcc:	b10a      	cbz	r2, 8003bd2 <_printf_common+0x26>
 8003bce:	3301      	adds	r3, #1
 8003bd0:	6033      	str	r3, [r6, #0]
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	0699      	lsls	r1, r3, #26
 8003bd6:	bf42      	ittt	mi
 8003bd8:	6833      	ldrmi	r3, [r6, #0]
 8003bda:	3302      	addmi	r3, #2
 8003bdc:	6033      	strmi	r3, [r6, #0]
 8003bde:	6825      	ldr	r5, [r4, #0]
 8003be0:	f015 0506 	ands.w	r5, r5, #6
 8003be4:	d106      	bne.n	8003bf4 <_printf_common+0x48>
 8003be6:	f104 0a19 	add.w	sl, r4, #25
 8003bea:	68e3      	ldr	r3, [r4, #12]
 8003bec:	6832      	ldr	r2, [r6, #0]
 8003bee:	1a9b      	subs	r3, r3, r2
 8003bf0:	42ab      	cmp	r3, r5
 8003bf2:	dc26      	bgt.n	8003c42 <_printf_common+0x96>
 8003bf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bf8:	1e13      	subs	r3, r2, #0
 8003bfa:	6822      	ldr	r2, [r4, #0]
 8003bfc:	bf18      	it	ne
 8003bfe:	2301      	movne	r3, #1
 8003c00:	0692      	lsls	r2, r2, #26
 8003c02:	d42b      	bmi.n	8003c5c <_printf_common+0xb0>
 8003c04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c08:	4649      	mov	r1, r9
 8003c0a:	4638      	mov	r0, r7
 8003c0c:	47c0      	blx	r8
 8003c0e:	3001      	adds	r0, #1
 8003c10:	d01e      	beq.n	8003c50 <_printf_common+0xa4>
 8003c12:	6823      	ldr	r3, [r4, #0]
 8003c14:	68e5      	ldr	r5, [r4, #12]
 8003c16:	6832      	ldr	r2, [r6, #0]
 8003c18:	f003 0306 	and.w	r3, r3, #6
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	bf08      	it	eq
 8003c20:	1aad      	subeq	r5, r5, r2
 8003c22:	68a3      	ldr	r3, [r4, #8]
 8003c24:	6922      	ldr	r2, [r4, #16]
 8003c26:	bf0c      	ite	eq
 8003c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c2c:	2500      	movne	r5, #0
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	bfc4      	itt	gt
 8003c32:	1a9b      	subgt	r3, r3, r2
 8003c34:	18ed      	addgt	r5, r5, r3
 8003c36:	2600      	movs	r6, #0
 8003c38:	341a      	adds	r4, #26
 8003c3a:	42b5      	cmp	r5, r6
 8003c3c:	d11a      	bne.n	8003c74 <_printf_common+0xc8>
 8003c3e:	2000      	movs	r0, #0
 8003c40:	e008      	b.n	8003c54 <_printf_common+0xa8>
 8003c42:	2301      	movs	r3, #1
 8003c44:	4652      	mov	r2, sl
 8003c46:	4649      	mov	r1, r9
 8003c48:	4638      	mov	r0, r7
 8003c4a:	47c0      	blx	r8
 8003c4c:	3001      	adds	r0, #1
 8003c4e:	d103      	bne.n	8003c58 <_printf_common+0xac>
 8003c50:	f04f 30ff 	mov.w	r0, #4294967295
 8003c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c58:	3501      	adds	r5, #1
 8003c5a:	e7c6      	b.n	8003bea <_printf_common+0x3e>
 8003c5c:	18e1      	adds	r1, r4, r3
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	2030      	movs	r0, #48	; 0x30
 8003c62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c66:	4422      	add	r2, r4
 8003c68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c70:	3302      	adds	r3, #2
 8003c72:	e7c7      	b.n	8003c04 <_printf_common+0x58>
 8003c74:	2301      	movs	r3, #1
 8003c76:	4622      	mov	r2, r4
 8003c78:	4649      	mov	r1, r9
 8003c7a:	4638      	mov	r0, r7
 8003c7c:	47c0      	blx	r8
 8003c7e:	3001      	adds	r0, #1
 8003c80:	d0e6      	beq.n	8003c50 <_printf_common+0xa4>
 8003c82:	3601      	adds	r6, #1
 8003c84:	e7d9      	b.n	8003c3a <_printf_common+0x8e>
	...

08003c88 <_printf_i>:
 8003c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c8c:	7e0f      	ldrb	r7, [r1, #24]
 8003c8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c90:	2f78      	cmp	r7, #120	; 0x78
 8003c92:	4691      	mov	r9, r2
 8003c94:	4680      	mov	r8, r0
 8003c96:	460c      	mov	r4, r1
 8003c98:	469a      	mov	sl, r3
 8003c9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c9e:	d807      	bhi.n	8003cb0 <_printf_i+0x28>
 8003ca0:	2f62      	cmp	r7, #98	; 0x62
 8003ca2:	d80a      	bhi.n	8003cba <_printf_i+0x32>
 8003ca4:	2f00      	cmp	r7, #0
 8003ca6:	f000 80d8 	beq.w	8003e5a <_printf_i+0x1d2>
 8003caa:	2f58      	cmp	r7, #88	; 0x58
 8003cac:	f000 80a3 	beq.w	8003df6 <_printf_i+0x16e>
 8003cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003cb8:	e03a      	b.n	8003d30 <_printf_i+0xa8>
 8003cba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003cbe:	2b15      	cmp	r3, #21
 8003cc0:	d8f6      	bhi.n	8003cb0 <_printf_i+0x28>
 8003cc2:	a101      	add	r1, pc, #4	; (adr r1, 8003cc8 <_printf_i+0x40>)
 8003cc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cc8:	08003d21 	.word	0x08003d21
 8003ccc:	08003d35 	.word	0x08003d35
 8003cd0:	08003cb1 	.word	0x08003cb1
 8003cd4:	08003cb1 	.word	0x08003cb1
 8003cd8:	08003cb1 	.word	0x08003cb1
 8003cdc:	08003cb1 	.word	0x08003cb1
 8003ce0:	08003d35 	.word	0x08003d35
 8003ce4:	08003cb1 	.word	0x08003cb1
 8003ce8:	08003cb1 	.word	0x08003cb1
 8003cec:	08003cb1 	.word	0x08003cb1
 8003cf0:	08003cb1 	.word	0x08003cb1
 8003cf4:	08003e41 	.word	0x08003e41
 8003cf8:	08003d65 	.word	0x08003d65
 8003cfc:	08003e23 	.word	0x08003e23
 8003d00:	08003cb1 	.word	0x08003cb1
 8003d04:	08003cb1 	.word	0x08003cb1
 8003d08:	08003e63 	.word	0x08003e63
 8003d0c:	08003cb1 	.word	0x08003cb1
 8003d10:	08003d65 	.word	0x08003d65
 8003d14:	08003cb1 	.word	0x08003cb1
 8003d18:	08003cb1 	.word	0x08003cb1
 8003d1c:	08003e2b 	.word	0x08003e2b
 8003d20:	682b      	ldr	r3, [r5, #0]
 8003d22:	1d1a      	adds	r2, r3, #4
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	602a      	str	r2, [r5, #0]
 8003d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0a3      	b.n	8003e7c <_printf_i+0x1f4>
 8003d34:	6820      	ldr	r0, [r4, #0]
 8003d36:	6829      	ldr	r1, [r5, #0]
 8003d38:	0606      	lsls	r6, r0, #24
 8003d3a:	f101 0304 	add.w	r3, r1, #4
 8003d3e:	d50a      	bpl.n	8003d56 <_printf_i+0xce>
 8003d40:	680e      	ldr	r6, [r1, #0]
 8003d42:	602b      	str	r3, [r5, #0]
 8003d44:	2e00      	cmp	r6, #0
 8003d46:	da03      	bge.n	8003d50 <_printf_i+0xc8>
 8003d48:	232d      	movs	r3, #45	; 0x2d
 8003d4a:	4276      	negs	r6, r6
 8003d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d50:	485e      	ldr	r0, [pc, #376]	; (8003ecc <_printf_i+0x244>)
 8003d52:	230a      	movs	r3, #10
 8003d54:	e019      	b.n	8003d8a <_printf_i+0x102>
 8003d56:	680e      	ldr	r6, [r1, #0]
 8003d58:	602b      	str	r3, [r5, #0]
 8003d5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d5e:	bf18      	it	ne
 8003d60:	b236      	sxthne	r6, r6
 8003d62:	e7ef      	b.n	8003d44 <_printf_i+0xbc>
 8003d64:	682b      	ldr	r3, [r5, #0]
 8003d66:	6820      	ldr	r0, [r4, #0]
 8003d68:	1d19      	adds	r1, r3, #4
 8003d6a:	6029      	str	r1, [r5, #0]
 8003d6c:	0601      	lsls	r1, r0, #24
 8003d6e:	d501      	bpl.n	8003d74 <_printf_i+0xec>
 8003d70:	681e      	ldr	r6, [r3, #0]
 8003d72:	e002      	b.n	8003d7a <_printf_i+0xf2>
 8003d74:	0646      	lsls	r6, r0, #25
 8003d76:	d5fb      	bpl.n	8003d70 <_printf_i+0xe8>
 8003d78:	881e      	ldrh	r6, [r3, #0]
 8003d7a:	4854      	ldr	r0, [pc, #336]	; (8003ecc <_printf_i+0x244>)
 8003d7c:	2f6f      	cmp	r7, #111	; 0x6f
 8003d7e:	bf0c      	ite	eq
 8003d80:	2308      	moveq	r3, #8
 8003d82:	230a      	movne	r3, #10
 8003d84:	2100      	movs	r1, #0
 8003d86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d8a:	6865      	ldr	r5, [r4, #4]
 8003d8c:	60a5      	str	r5, [r4, #8]
 8003d8e:	2d00      	cmp	r5, #0
 8003d90:	bfa2      	ittt	ge
 8003d92:	6821      	ldrge	r1, [r4, #0]
 8003d94:	f021 0104 	bicge.w	r1, r1, #4
 8003d98:	6021      	strge	r1, [r4, #0]
 8003d9a:	b90e      	cbnz	r6, 8003da0 <_printf_i+0x118>
 8003d9c:	2d00      	cmp	r5, #0
 8003d9e:	d04d      	beq.n	8003e3c <_printf_i+0x1b4>
 8003da0:	4615      	mov	r5, r2
 8003da2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003da6:	fb03 6711 	mls	r7, r3, r1, r6
 8003daa:	5dc7      	ldrb	r7, [r0, r7]
 8003dac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003db0:	4637      	mov	r7, r6
 8003db2:	42bb      	cmp	r3, r7
 8003db4:	460e      	mov	r6, r1
 8003db6:	d9f4      	bls.n	8003da2 <_printf_i+0x11a>
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d10b      	bne.n	8003dd4 <_printf_i+0x14c>
 8003dbc:	6823      	ldr	r3, [r4, #0]
 8003dbe:	07de      	lsls	r6, r3, #31
 8003dc0:	d508      	bpl.n	8003dd4 <_printf_i+0x14c>
 8003dc2:	6923      	ldr	r3, [r4, #16]
 8003dc4:	6861      	ldr	r1, [r4, #4]
 8003dc6:	4299      	cmp	r1, r3
 8003dc8:	bfde      	ittt	le
 8003dca:	2330      	movle	r3, #48	; 0x30
 8003dcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003dd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003dd4:	1b52      	subs	r2, r2, r5
 8003dd6:	6122      	str	r2, [r4, #16]
 8003dd8:	f8cd a000 	str.w	sl, [sp]
 8003ddc:	464b      	mov	r3, r9
 8003dde:	aa03      	add	r2, sp, #12
 8003de0:	4621      	mov	r1, r4
 8003de2:	4640      	mov	r0, r8
 8003de4:	f7ff fee2 	bl	8003bac <_printf_common>
 8003de8:	3001      	adds	r0, #1
 8003dea:	d14c      	bne.n	8003e86 <_printf_i+0x1fe>
 8003dec:	f04f 30ff 	mov.w	r0, #4294967295
 8003df0:	b004      	add	sp, #16
 8003df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003df6:	4835      	ldr	r0, [pc, #212]	; (8003ecc <_printf_i+0x244>)
 8003df8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003dfc:	6829      	ldr	r1, [r5, #0]
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e04:	6029      	str	r1, [r5, #0]
 8003e06:	061d      	lsls	r5, r3, #24
 8003e08:	d514      	bpl.n	8003e34 <_printf_i+0x1ac>
 8003e0a:	07df      	lsls	r7, r3, #31
 8003e0c:	bf44      	itt	mi
 8003e0e:	f043 0320 	orrmi.w	r3, r3, #32
 8003e12:	6023      	strmi	r3, [r4, #0]
 8003e14:	b91e      	cbnz	r6, 8003e1e <_printf_i+0x196>
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	f023 0320 	bic.w	r3, r3, #32
 8003e1c:	6023      	str	r3, [r4, #0]
 8003e1e:	2310      	movs	r3, #16
 8003e20:	e7b0      	b.n	8003d84 <_printf_i+0xfc>
 8003e22:	6823      	ldr	r3, [r4, #0]
 8003e24:	f043 0320 	orr.w	r3, r3, #32
 8003e28:	6023      	str	r3, [r4, #0]
 8003e2a:	2378      	movs	r3, #120	; 0x78
 8003e2c:	4828      	ldr	r0, [pc, #160]	; (8003ed0 <_printf_i+0x248>)
 8003e2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e32:	e7e3      	b.n	8003dfc <_printf_i+0x174>
 8003e34:	0659      	lsls	r1, r3, #25
 8003e36:	bf48      	it	mi
 8003e38:	b2b6      	uxthmi	r6, r6
 8003e3a:	e7e6      	b.n	8003e0a <_printf_i+0x182>
 8003e3c:	4615      	mov	r5, r2
 8003e3e:	e7bb      	b.n	8003db8 <_printf_i+0x130>
 8003e40:	682b      	ldr	r3, [r5, #0]
 8003e42:	6826      	ldr	r6, [r4, #0]
 8003e44:	6961      	ldr	r1, [r4, #20]
 8003e46:	1d18      	adds	r0, r3, #4
 8003e48:	6028      	str	r0, [r5, #0]
 8003e4a:	0635      	lsls	r5, r6, #24
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	d501      	bpl.n	8003e54 <_printf_i+0x1cc>
 8003e50:	6019      	str	r1, [r3, #0]
 8003e52:	e002      	b.n	8003e5a <_printf_i+0x1d2>
 8003e54:	0670      	lsls	r0, r6, #25
 8003e56:	d5fb      	bpl.n	8003e50 <_printf_i+0x1c8>
 8003e58:	8019      	strh	r1, [r3, #0]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	6123      	str	r3, [r4, #16]
 8003e5e:	4615      	mov	r5, r2
 8003e60:	e7ba      	b.n	8003dd8 <_printf_i+0x150>
 8003e62:	682b      	ldr	r3, [r5, #0]
 8003e64:	1d1a      	adds	r2, r3, #4
 8003e66:	602a      	str	r2, [r5, #0]
 8003e68:	681d      	ldr	r5, [r3, #0]
 8003e6a:	6862      	ldr	r2, [r4, #4]
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	4628      	mov	r0, r5
 8003e70:	f7fc f9b6 	bl	80001e0 <memchr>
 8003e74:	b108      	cbz	r0, 8003e7a <_printf_i+0x1f2>
 8003e76:	1b40      	subs	r0, r0, r5
 8003e78:	6060      	str	r0, [r4, #4]
 8003e7a:	6863      	ldr	r3, [r4, #4]
 8003e7c:	6123      	str	r3, [r4, #16]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e84:	e7a8      	b.n	8003dd8 <_printf_i+0x150>
 8003e86:	6923      	ldr	r3, [r4, #16]
 8003e88:	462a      	mov	r2, r5
 8003e8a:	4649      	mov	r1, r9
 8003e8c:	4640      	mov	r0, r8
 8003e8e:	47d0      	blx	sl
 8003e90:	3001      	adds	r0, #1
 8003e92:	d0ab      	beq.n	8003dec <_printf_i+0x164>
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	079b      	lsls	r3, r3, #30
 8003e98:	d413      	bmi.n	8003ec2 <_printf_i+0x23a>
 8003e9a:	68e0      	ldr	r0, [r4, #12]
 8003e9c:	9b03      	ldr	r3, [sp, #12]
 8003e9e:	4298      	cmp	r0, r3
 8003ea0:	bfb8      	it	lt
 8003ea2:	4618      	movlt	r0, r3
 8003ea4:	e7a4      	b.n	8003df0 <_printf_i+0x168>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	4632      	mov	r2, r6
 8003eaa:	4649      	mov	r1, r9
 8003eac:	4640      	mov	r0, r8
 8003eae:	47d0      	blx	sl
 8003eb0:	3001      	adds	r0, #1
 8003eb2:	d09b      	beq.n	8003dec <_printf_i+0x164>
 8003eb4:	3501      	adds	r5, #1
 8003eb6:	68e3      	ldr	r3, [r4, #12]
 8003eb8:	9903      	ldr	r1, [sp, #12]
 8003eba:	1a5b      	subs	r3, r3, r1
 8003ebc:	42ab      	cmp	r3, r5
 8003ebe:	dcf2      	bgt.n	8003ea6 <_printf_i+0x21e>
 8003ec0:	e7eb      	b.n	8003e9a <_printf_i+0x212>
 8003ec2:	2500      	movs	r5, #0
 8003ec4:	f104 0619 	add.w	r6, r4, #25
 8003ec8:	e7f5      	b.n	8003eb6 <_printf_i+0x22e>
 8003eca:	bf00      	nop
 8003ecc:	08004211 	.word	0x08004211
 8003ed0:	08004222 	.word	0x08004222

08003ed4 <memcpy>:
 8003ed4:	440a      	add	r2, r1
 8003ed6:	4291      	cmp	r1, r2
 8003ed8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003edc:	d100      	bne.n	8003ee0 <memcpy+0xc>
 8003ede:	4770      	bx	lr
 8003ee0:	b510      	push	{r4, lr}
 8003ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003eea:	4291      	cmp	r1, r2
 8003eec:	d1f9      	bne.n	8003ee2 <memcpy+0xe>
 8003eee:	bd10      	pop	{r4, pc}

08003ef0 <memmove>:
 8003ef0:	4288      	cmp	r0, r1
 8003ef2:	b510      	push	{r4, lr}
 8003ef4:	eb01 0402 	add.w	r4, r1, r2
 8003ef8:	d902      	bls.n	8003f00 <memmove+0x10>
 8003efa:	4284      	cmp	r4, r0
 8003efc:	4623      	mov	r3, r4
 8003efe:	d807      	bhi.n	8003f10 <memmove+0x20>
 8003f00:	1e43      	subs	r3, r0, #1
 8003f02:	42a1      	cmp	r1, r4
 8003f04:	d008      	beq.n	8003f18 <memmove+0x28>
 8003f06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f0e:	e7f8      	b.n	8003f02 <memmove+0x12>
 8003f10:	4402      	add	r2, r0
 8003f12:	4601      	mov	r1, r0
 8003f14:	428a      	cmp	r2, r1
 8003f16:	d100      	bne.n	8003f1a <memmove+0x2a>
 8003f18:	bd10      	pop	{r4, pc}
 8003f1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f22:	e7f7      	b.n	8003f14 <memmove+0x24>

08003f24 <_free_r>:
 8003f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f26:	2900      	cmp	r1, #0
 8003f28:	d044      	beq.n	8003fb4 <_free_r+0x90>
 8003f2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f2e:	9001      	str	r0, [sp, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f1a1 0404 	sub.w	r4, r1, #4
 8003f36:	bfb8      	it	lt
 8003f38:	18e4      	addlt	r4, r4, r3
 8003f3a:	f000 f913 	bl	8004164 <__malloc_lock>
 8003f3e:	4a1e      	ldr	r2, [pc, #120]	; (8003fb8 <_free_r+0x94>)
 8003f40:	9801      	ldr	r0, [sp, #4]
 8003f42:	6813      	ldr	r3, [r2, #0]
 8003f44:	b933      	cbnz	r3, 8003f54 <_free_r+0x30>
 8003f46:	6063      	str	r3, [r4, #4]
 8003f48:	6014      	str	r4, [r2, #0]
 8003f4a:	b003      	add	sp, #12
 8003f4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f50:	f000 b90e 	b.w	8004170 <__malloc_unlock>
 8003f54:	42a3      	cmp	r3, r4
 8003f56:	d908      	bls.n	8003f6a <_free_r+0x46>
 8003f58:	6825      	ldr	r5, [r4, #0]
 8003f5a:	1961      	adds	r1, r4, r5
 8003f5c:	428b      	cmp	r3, r1
 8003f5e:	bf01      	itttt	eq
 8003f60:	6819      	ldreq	r1, [r3, #0]
 8003f62:	685b      	ldreq	r3, [r3, #4]
 8003f64:	1949      	addeq	r1, r1, r5
 8003f66:	6021      	streq	r1, [r4, #0]
 8003f68:	e7ed      	b.n	8003f46 <_free_r+0x22>
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	b10b      	cbz	r3, 8003f74 <_free_r+0x50>
 8003f70:	42a3      	cmp	r3, r4
 8003f72:	d9fa      	bls.n	8003f6a <_free_r+0x46>
 8003f74:	6811      	ldr	r1, [r2, #0]
 8003f76:	1855      	adds	r5, r2, r1
 8003f78:	42a5      	cmp	r5, r4
 8003f7a:	d10b      	bne.n	8003f94 <_free_r+0x70>
 8003f7c:	6824      	ldr	r4, [r4, #0]
 8003f7e:	4421      	add	r1, r4
 8003f80:	1854      	adds	r4, r2, r1
 8003f82:	42a3      	cmp	r3, r4
 8003f84:	6011      	str	r1, [r2, #0]
 8003f86:	d1e0      	bne.n	8003f4a <_free_r+0x26>
 8003f88:	681c      	ldr	r4, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	6053      	str	r3, [r2, #4]
 8003f8e:	4421      	add	r1, r4
 8003f90:	6011      	str	r1, [r2, #0]
 8003f92:	e7da      	b.n	8003f4a <_free_r+0x26>
 8003f94:	d902      	bls.n	8003f9c <_free_r+0x78>
 8003f96:	230c      	movs	r3, #12
 8003f98:	6003      	str	r3, [r0, #0]
 8003f9a:	e7d6      	b.n	8003f4a <_free_r+0x26>
 8003f9c:	6825      	ldr	r5, [r4, #0]
 8003f9e:	1961      	adds	r1, r4, r5
 8003fa0:	428b      	cmp	r3, r1
 8003fa2:	bf04      	itt	eq
 8003fa4:	6819      	ldreq	r1, [r3, #0]
 8003fa6:	685b      	ldreq	r3, [r3, #4]
 8003fa8:	6063      	str	r3, [r4, #4]
 8003faa:	bf04      	itt	eq
 8003fac:	1949      	addeq	r1, r1, r5
 8003fae:	6021      	streq	r1, [r4, #0]
 8003fb0:	6054      	str	r4, [r2, #4]
 8003fb2:	e7ca      	b.n	8003f4a <_free_r+0x26>
 8003fb4:	b003      	add	sp, #12
 8003fb6:	bd30      	pop	{r4, r5, pc}
 8003fb8:	20000170 	.word	0x20000170

08003fbc <sbrk_aligned>:
 8003fbc:	b570      	push	{r4, r5, r6, lr}
 8003fbe:	4e0e      	ldr	r6, [pc, #56]	; (8003ff8 <sbrk_aligned+0x3c>)
 8003fc0:	460c      	mov	r4, r1
 8003fc2:	6831      	ldr	r1, [r6, #0]
 8003fc4:	4605      	mov	r5, r0
 8003fc6:	b911      	cbnz	r1, 8003fce <sbrk_aligned+0x12>
 8003fc8:	f000 f8bc 	bl	8004144 <_sbrk_r>
 8003fcc:	6030      	str	r0, [r6, #0]
 8003fce:	4621      	mov	r1, r4
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	f000 f8b7 	bl	8004144 <_sbrk_r>
 8003fd6:	1c43      	adds	r3, r0, #1
 8003fd8:	d00a      	beq.n	8003ff0 <sbrk_aligned+0x34>
 8003fda:	1cc4      	adds	r4, r0, #3
 8003fdc:	f024 0403 	bic.w	r4, r4, #3
 8003fe0:	42a0      	cmp	r0, r4
 8003fe2:	d007      	beq.n	8003ff4 <sbrk_aligned+0x38>
 8003fe4:	1a21      	subs	r1, r4, r0
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	f000 f8ac 	bl	8004144 <_sbrk_r>
 8003fec:	3001      	adds	r0, #1
 8003fee:	d101      	bne.n	8003ff4 <sbrk_aligned+0x38>
 8003ff0:	f04f 34ff 	mov.w	r4, #4294967295
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	bd70      	pop	{r4, r5, r6, pc}
 8003ff8:	20000174 	.word	0x20000174

08003ffc <_malloc_r>:
 8003ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004000:	1ccd      	adds	r5, r1, #3
 8004002:	f025 0503 	bic.w	r5, r5, #3
 8004006:	3508      	adds	r5, #8
 8004008:	2d0c      	cmp	r5, #12
 800400a:	bf38      	it	cc
 800400c:	250c      	movcc	r5, #12
 800400e:	2d00      	cmp	r5, #0
 8004010:	4607      	mov	r7, r0
 8004012:	db01      	blt.n	8004018 <_malloc_r+0x1c>
 8004014:	42a9      	cmp	r1, r5
 8004016:	d905      	bls.n	8004024 <_malloc_r+0x28>
 8004018:	230c      	movs	r3, #12
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	2600      	movs	r6, #0
 800401e:	4630      	mov	r0, r6
 8004020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004024:	4e2e      	ldr	r6, [pc, #184]	; (80040e0 <_malloc_r+0xe4>)
 8004026:	f000 f89d 	bl	8004164 <__malloc_lock>
 800402a:	6833      	ldr	r3, [r6, #0]
 800402c:	461c      	mov	r4, r3
 800402e:	bb34      	cbnz	r4, 800407e <_malloc_r+0x82>
 8004030:	4629      	mov	r1, r5
 8004032:	4638      	mov	r0, r7
 8004034:	f7ff ffc2 	bl	8003fbc <sbrk_aligned>
 8004038:	1c43      	adds	r3, r0, #1
 800403a:	4604      	mov	r4, r0
 800403c:	d14d      	bne.n	80040da <_malloc_r+0xde>
 800403e:	6834      	ldr	r4, [r6, #0]
 8004040:	4626      	mov	r6, r4
 8004042:	2e00      	cmp	r6, #0
 8004044:	d140      	bne.n	80040c8 <_malloc_r+0xcc>
 8004046:	6823      	ldr	r3, [r4, #0]
 8004048:	4631      	mov	r1, r6
 800404a:	4638      	mov	r0, r7
 800404c:	eb04 0803 	add.w	r8, r4, r3
 8004050:	f000 f878 	bl	8004144 <_sbrk_r>
 8004054:	4580      	cmp	r8, r0
 8004056:	d13a      	bne.n	80040ce <_malloc_r+0xd2>
 8004058:	6821      	ldr	r1, [r4, #0]
 800405a:	3503      	adds	r5, #3
 800405c:	1a6d      	subs	r5, r5, r1
 800405e:	f025 0503 	bic.w	r5, r5, #3
 8004062:	3508      	adds	r5, #8
 8004064:	2d0c      	cmp	r5, #12
 8004066:	bf38      	it	cc
 8004068:	250c      	movcc	r5, #12
 800406a:	4629      	mov	r1, r5
 800406c:	4638      	mov	r0, r7
 800406e:	f7ff ffa5 	bl	8003fbc <sbrk_aligned>
 8004072:	3001      	adds	r0, #1
 8004074:	d02b      	beq.n	80040ce <_malloc_r+0xd2>
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	442b      	add	r3, r5
 800407a:	6023      	str	r3, [r4, #0]
 800407c:	e00e      	b.n	800409c <_malloc_r+0xa0>
 800407e:	6822      	ldr	r2, [r4, #0]
 8004080:	1b52      	subs	r2, r2, r5
 8004082:	d41e      	bmi.n	80040c2 <_malloc_r+0xc6>
 8004084:	2a0b      	cmp	r2, #11
 8004086:	d916      	bls.n	80040b6 <_malloc_r+0xba>
 8004088:	1961      	adds	r1, r4, r5
 800408a:	42a3      	cmp	r3, r4
 800408c:	6025      	str	r5, [r4, #0]
 800408e:	bf18      	it	ne
 8004090:	6059      	strne	r1, [r3, #4]
 8004092:	6863      	ldr	r3, [r4, #4]
 8004094:	bf08      	it	eq
 8004096:	6031      	streq	r1, [r6, #0]
 8004098:	5162      	str	r2, [r4, r5]
 800409a:	604b      	str	r3, [r1, #4]
 800409c:	4638      	mov	r0, r7
 800409e:	f104 060b 	add.w	r6, r4, #11
 80040a2:	f000 f865 	bl	8004170 <__malloc_unlock>
 80040a6:	f026 0607 	bic.w	r6, r6, #7
 80040aa:	1d23      	adds	r3, r4, #4
 80040ac:	1af2      	subs	r2, r6, r3
 80040ae:	d0b6      	beq.n	800401e <_malloc_r+0x22>
 80040b0:	1b9b      	subs	r3, r3, r6
 80040b2:	50a3      	str	r3, [r4, r2]
 80040b4:	e7b3      	b.n	800401e <_malloc_r+0x22>
 80040b6:	6862      	ldr	r2, [r4, #4]
 80040b8:	42a3      	cmp	r3, r4
 80040ba:	bf0c      	ite	eq
 80040bc:	6032      	streq	r2, [r6, #0]
 80040be:	605a      	strne	r2, [r3, #4]
 80040c0:	e7ec      	b.n	800409c <_malloc_r+0xa0>
 80040c2:	4623      	mov	r3, r4
 80040c4:	6864      	ldr	r4, [r4, #4]
 80040c6:	e7b2      	b.n	800402e <_malloc_r+0x32>
 80040c8:	4634      	mov	r4, r6
 80040ca:	6876      	ldr	r6, [r6, #4]
 80040cc:	e7b9      	b.n	8004042 <_malloc_r+0x46>
 80040ce:	230c      	movs	r3, #12
 80040d0:	603b      	str	r3, [r7, #0]
 80040d2:	4638      	mov	r0, r7
 80040d4:	f000 f84c 	bl	8004170 <__malloc_unlock>
 80040d8:	e7a1      	b.n	800401e <_malloc_r+0x22>
 80040da:	6025      	str	r5, [r4, #0]
 80040dc:	e7de      	b.n	800409c <_malloc_r+0xa0>
 80040de:	bf00      	nop
 80040e0:	20000170 	.word	0x20000170

080040e4 <_realloc_r>:
 80040e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040e8:	4680      	mov	r8, r0
 80040ea:	4614      	mov	r4, r2
 80040ec:	460e      	mov	r6, r1
 80040ee:	b921      	cbnz	r1, 80040fa <_realloc_r+0x16>
 80040f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040f4:	4611      	mov	r1, r2
 80040f6:	f7ff bf81 	b.w	8003ffc <_malloc_r>
 80040fa:	b92a      	cbnz	r2, 8004108 <_realloc_r+0x24>
 80040fc:	f7ff ff12 	bl	8003f24 <_free_r>
 8004100:	4625      	mov	r5, r4
 8004102:	4628      	mov	r0, r5
 8004104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004108:	f000 f838 	bl	800417c <_malloc_usable_size_r>
 800410c:	4284      	cmp	r4, r0
 800410e:	4607      	mov	r7, r0
 8004110:	d802      	bhi.n	8004118 <_realloc_r+0x34>
 8004112:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004116:	d812      	bhi.n	800413e <_realloc_r+0x5a>
 8004118:	4621      	mov	r1, r4
 800411a:	4640      	mov	r0, r8
 800411c:	f7ff ff6e 	bl	8003ffc <_malloc_r>
 8004120:	4605      	mov	r5, r0
 8004122:	2800      	cmp	r0, #0
 8004124:	d0ed      	beq.n	8004102 <_realloc_r+0x1e>
 8004126:	42bc      	cmp	r4, r7
 8004128:	4622      	mov	r2, r4
 800412a:	4631      	mov	r1, r6
 800412c:	bf28      	it	cs
 800412e:	463a      	movcs	r2, r7
 8004130:	f7ff fed0 	bl	8003ed4 <memcpy>
 8004134:	4631      	mov	r1, r6
 8004136:	4640      	mov	r0, r8
 8004138:	f7ff fef4 	bl	8003f24 <_free_r>
 800413c:	e7e1      	b.n	8004102 <_realloc_r+0x1e>
 800413e:	4635      	mov	r5, r6
 8004140:	e7df      	b.n	8004102 <_realloc_r+0x1e>
	...

08004144 <_sbrk_r>:
 8004144:	b538      	push	{r3, r4, r5, lr}
 8004146:	4d06      	ldr	r5, [pc, #24]	; (8004160 <_sbrk_r+0x1c>)
 8004148:	2300      	movs	r3, #0
 800414a:	4604      	mov	r4, r0
 800414c:	4608      	mov	r0, r1
 800414e:	602b      	str	r3, [r5, #0]
 8004150:	f7fc fac8 	bl	80006e4 <_sbrk>
 8004154:	1c43      	adds	r3, r0, #1
 8004156:	d102      	bne.n	800415e <_sbrk_r+0x1a>
 8004158:	682b      	ldr	r3, [r5, #0]
 800415a:	b103      	cbz	r3, 800415e <_sbrk_r+0x1a>
 800415c:	6023      	str	r3, [r4, #0]
 800415e:	bd38      	pop	{r3, r4, r5, pc}
 8004160:	20000178 	.word	0x20000178

08004164 <__malloc_lock>:
 8004164:	4801      	ldr	r0, [pc, #4]	; (800416c <__malloc_lock+0x8>)
 8004166:	f000 b811 	b.w	800418c <__retarget_lock_acquire_recursive>
 800416a:	bf00      	nop
 800416c:	2000017c 	.word	0x2000017c

08004170 <__malloc_unlock>:
 8004170:	4801      	ldr	r0, [pc, #4]	; (8004178 <__malloc_unlock+0x8>)
 8004172:	f000 b80c 	b.w	800418e <__retarget_lock_release_recursive>
 8004176:	bf00      	nop
 8004178:	2000017c 	.word	0x2000017c

0800417c <_malloc_usable_size_r>:
 800417c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004180:	1f18      	subs	r0, r3, #4
 8004182:	2b00      	cmp	r3, #0
 8004184:	bfbc      	itt	lt
 8004186:	580b      	ldrlt	r3, [r1, r0]
 8004188:	18c0      	addlt	r0, r0, r3
 800418a:	4770      	bx	lr

0800418c <__retarget_lock_acquire_recursive>:
 800418c:	4770      	bx	lr

0800418e <__retarget_lock_release_recursive>:
 800418e:	4770      	bx	lr

08004190 <_init>:
 8004190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004192:	bf00      	nop
 8004194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004196:	bc08      	pop	{r3}
 8004198:	469e      	mov	lr, r3
 800419a:	4770      	bx	lr

0800419c <_fini>:
 800419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419e:	bf00      	nop
 80041a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a2:	bc08      	pop	{r3}
 80041a4:	469e      	mov	lr, r3
 80041a6:	4770      	bx	lr
